#date: 2025-05-21T16:57:46Z
#url: https://api.github.com/gists/01a0ea1593693ad23388c1b4e4707099
#owner: https://api.github.com/users/mtrojas

#!/usr/bin/env bash

set -euo pipefail

ISLAND_PATH="$1"
PACKAGE_JSON="$ISLAND_PATH/package.json"
YARN_LOCK="$ISLAND_PATH/yarn.lock"

echo "üîç Reading production dependencies from $PACKAGE_JSON"

# Read dependencies keys and versions, exclude comments and empty
mapfile -t deps < <(jq -r '.dependencies | to_entries | map("\(.key)@\(.value)") | .[]' "$PACKAGE_JSON" | grep -v '^//')

declare -a resolved_deps=()

echo "üîé Resolving versions from $YARN_LOCK..."

for dep in "${deps[@]}"; do
  # Handle scoped package keys with quotes in yarn.lock
  if [[ "$dep" == @* ]]; then
    # Add quotes around the pattern for scoped packages
    pattern="\"${dep}\":"
  else
    pattern="${dep}:"
  fi

  resolved_ver=$(awk -v pat="$pattern" '
    $0 == pat {
      getline
      while ($0 ~ /^[[:space:]]+/) {
        if ($1 == "version") {
          gsub(/"/, "", $2)
          print $2
          exit
        }
        getline
      }
    }
  ' "$YARN_LOCK")

  if [[ -z "$resolved_ver" ]]; then
    echo "‚ö†Ô∏è  Could not resolve version for $dep in $YARN_LOCK"
    continue
  fi

  # Compose package@resolved_version
  # Strip version specifier from dep to get package name only
  pkg_name="${dep%@*}"
  resolved_dep="${pkg_name}@${resolved_ver}"
  resolved_deps+=("$resolved_dep")
done

echo
echo "üì¶ Packages to query NPM for deprecation status:"
printf '%s\n' "${resolved_deps[@]}"
echo

echo "üîé Querying npm registry for deprecated packages..."

for pkg in "${resolved_deps[@]}"; do
  name="${pkg%@*}"
  version="${pkg#*@}"

  # Query npm registry for this exact version
  result=$(curl -s "https://registry.npmjs.org/$name")

  if [[ -z "$result" ]]; then
    echo "‚ö†Ô∏è  Failed to query npm registry for $pkg"
    continue
  fi

  deprecated=$(echo "$result" | jq -r --arg ver "$version" '.versions[$ver].deprecated // empty')

  if [[ -n "$deprecated" ]]; then
    echo "‚ö†Ô∏è  $pkg is deprecated: $deprecated"
  fi
done

echo
echo "‚úÖ Done for island $ISLAND_PATH"
