#date: 2024-05-29T16:58:21Z
#url: https://api.github.com/gists/853f74403aed8c7efe6b30e7195d71c1
#owner: https://api.github.com/users/adepte-fufayka

import telebot
import re
import time
import random
import CONFIG
print('–≤–∫–ª—é—á–µ–Ω')

TOKEN = "**********"
bot = "**********"
cities = [["üèõ", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏—è"], ["üè≠", "–ü–æ—Ä—Ç-–†–æ–º–∞–Ω—Ç–∏–∫"], ["üè¢", "–≠–Ω–¥–∏–º–∏–æ–Ω"], ["üè£", "–ö–∏—Ç—Å"]]
zones = ['–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–µ–º–ª–∏', '–î–∏–∫–∏–µ –∑–µ–º–ª–∏', '–ì–æ—Ä–æ–¥—Å–∫–æ–π –∑–æ–æ–ø–∞—Ä–∫', '–ö–≤–∞—Ä—Ç–∞–ª –ö–æ–º–∏-–ö–æ–Ω—â–∏–∫–æ–≤', '–ê–∑–∏–∞—Ç—Å–∫–æ–µ –≥–µ—Ç—Ç–æ',
         '–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–≤–∞—Ä–∏']

# print(time.time())
last_update = int(time.time())
lab_kb = telebot.types.InlineKeyboardMarkup(row_width=2)
# lab_kb.add(telebot.types.InlineKeyboardButton(text='üîº –ö–∞—á–µ—Å—Ç–≤–æ', callback_data='+quality'),
#        telebot.types.InlineKeyboardButton(text='üîΩ –ö–∞—á–µ—Å—Ç–≤–æ', callback_data='-quality'))
lab_kb.add(telebot.types.InlineKeyboardButton(text='üîº –¢—é–Ω–∏–Ω–≥', callback_data='+tuning'),
           telebot.types.InlineKeyboardButton(text='üîΩ –¢—é–Ω–∏–Ω–≥', callback_data='-tuning'))
lab_kb.add(telebot.types.InlineKeyboardButton(text='üîº –ó–∞—Ç–æ—á–∫–∞', callback_data='+sharpening'),
           telebot.types.InlineKeyboardButton(text='üîΩ –ó–∞—Ç–æ—á–∫–∞', callback_data='-sharpening'))


class Place:
    def __init__(self, name, _type, found, zone, x, y):
        self.name = name
        self._type = _type
        self.found = found
        self.zone = zone
        self.x = x
        self.y = y

    def __str__(self):
        return f'{self.name}\n{self._type}\n{self.found}\n{self.zone}\n{self.x}\n{self.y}\n'


class User:
    def __init__(self, uid, username, name, squad_name, time, res_time, deff, attack, health_p, power_p, mana_p, role,
                 boss_ping, city, prof, prof_time, timezone):
        self.uid = uid
        self.city = city
        self.res_time = res_time
        self.deff = deff
        self.attack = attack
        self.username = username
        self.name = name
        self.squad_name = squad_name
        self.time = time
        self.mana_p = mana_p
        self.power_p = power_p
        self.health_p = health_p
        self.role = role
        self.boss_ping = boss_ping
        self.prof = prof
        self.prof_time = prof_time
        self.timezone = timezone

    def __str__(self):
        return f'{self.uid}\n{self.username}\n{self.name}\n{self.squad_name}\n{self.time}\n{self.res_time}\n{self.deff}\n{self.attack}\n{self.health_p}\n{self.power_p}\n{self.mana_p}\n{self.role}\n{self.boss_ping}\n{self.city}\n{self.prof}\n{self.prof_time}\n{self.timezone}\n'


users = []
f = open("users.txt", "r", encoding='utf-8')
s = f.readlines()
k = 17
for i in range(len(s) // k):
    users.append(User(int(s[i * k]), s[i * k + 1][:-1], s[i * k + 2][:-1], s[i * k + 3][:-1], int(s[i * k + 4][:-1]),
                      int(s[i * k + 5][:-1]), int(s[i * k + 6][:-1]), int(s[i * k + 7][:-1]), int(s[i * k + 8][:-1]),
                      int(s[i * k + 9][:-1]),
                      int(s[i * k + 10][:-1]), s[i * k + 11][:-1], False if (s[i * k + 12][:-1]) == 'False' else True,
                      s[i * k + 13][:-1],
                      s[i * k + 14][:-1], int(s[i * k + 15][:-1]), int(s[i * k + 16][:-1])))
f.close()
shmot_quality = ['–ö–∞—á–µ—Å—Ç–≤–æ: ‚ñ´Ô∏è –ü–ª–æ—Ö–æ–µ', '–ö–∞—á–µ—Å—Ç–≤–æ: ‚ñ™Ô∏è –û–±—ã—á–Ω–æ–µ', '–ö–∞—á–µ—Å—Ç–≤–æ: üîπ –ù–µ–æ–±—ã—á–Ω–æ–µ', '–ö–∞—á–µ—Å—Ç–≤–æ: üî∏ –†–µ–¥–∫–æ–µ',
                 '–ö–∞—á–µ—Å—Ç–≤–æ: üî∫ –≠–ø–∏—á–µ—Å–∫–æ–µ']
shmot_dops = [['–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤–µ—â–µ–π:', 0.3], ['–í–∞–º–ø–∏—Ä–∏–∑–º:', 0.25], ['–ò–≥–Ω–æ—Ä. –±—Ä–æ–Ω–∏ –≤ PVP:', 0.4],
              ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ üîÆ:', 0.1],
              ['–û—Ç—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞:', 1],
              ['–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏:', -0.5],
              ['–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏:', 5], ['–î–æ–ø. üí∞ —Å –ø—Ä–æ–¥–∞–∂–∏ –≤–µ—â–µ–π:', 1], ['–î–æ–ø. üåü —Å –º–æ–±–æ–≤:', 0.25],
              ['–ö–∞—á–µ—Å—Ç–≤–æ –¥—Ä–æ–ø–∞:', 0.5], ['–î–æ–ø. üîÆ:'], ['–î–æ–ø. ‚ù§Ô∏è:'], ['–î–æ–ø. üí™:']]
places = []
f = open('places.txt', encoding='utf-8')
s = f.readlines()
k = 6
for i in range(len(s) // k):
    places.append(
        Place(s[i * k][:-1], int(s[i * k + 1]), False if (s[i * k + 2][:-1]) == 'False' else True, int(s[i * k + 3]),
              int(s[i * k + 4]),
              int(s[i * k + 5])))
    # print(s[i * k + 2][:-1])
f.close()


print('–Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É')

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    #print(111)
    print('–ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∫–Ω–æ–ø–∫–∏:', call.data)
    try:
        if call.data == "boss_ping":
            if call.message.date + 300 <= time.time():
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text="–û—Ç—Ä—è–¥ –Ω–µ —Å–æ–±—Ä–∞–Ω(")
            else:
                kb = telebot.types.InlineKeyboardMarkup(row_width=1)
                btn1 = telebot.types.InlineKeyboardButton(text="‚úÖ —è –≥–æ—Ç–æ–≤", callback_data='boss_ping')
                kb.add(btn1)
                # print(call.message.message_id, call.message.chat.id)
                edited_text = call.message.text.split('\n')
                this_usrname = call.from_user.username
                for i in range(len(edited_text)):
                    if edited_text[i].count(this_usrname) == 1:
                        edited_text[i] = '‚úÖ ' + '@' + this_usrname
                        break
                edir = ''
                for i in range(len(edited_text)):
                    edir += edited_text[i] + '\n'
                if edir.count('‚úÖ') == 5:
                    edir += '\n–û—Ç—Ä—è–¥ —Å–æ–±—Ä–∞–Ω!\n'
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=edir)
                    bot.reply_to(call.message, '–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –±–æ—Å—Å—Å–∞!')
                else:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=edir,
                                          reply_markup=kb)
        if call.data == 'settings_boss_ping':
            message = call.message
            ind = ind_check(call.from_user.id)
            if ind == -1:
                bot.reply_to(message,
                             f'@{call.from_user.username},–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—ã–∫–∞—Ç—å, –Ω—É–∂–Ω–æ –±—ã—Ç—å –≤ –º–æ–µ–π –±–∞–∑–µ')
            else:
                users[ind].boss_ping = not (users[ind].boss_ping)
                s = '‚úÖ–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–∏–Ω–≥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–∞ –±–æ—Å—Å–æ–≤' if users[
                    ind].boss_ping else '‚õîÔ∏è–¢–µ–ø–µ—Ä—å —è –Ω–µ –±—É–¥—É –ø–∏–Ω–≥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–∞ –±–æ—Å—Å–æ–≤'
                bot.answer_callback_query(call.id, text=s)
                update_data_users()
        if call.data == '+tuning':
            lab_tun(call.message)
        if call.data == '-tuning':
            lab_tun(call.message, -1)
        if call.data == '-quality':
            lab_qual(call.message, -1)
        if call.data == '+quality':
            lab_qual(call.message)
        if call.data == '+sharpening':
            lab_sharp(call.message)
        if call.data == '-sharpening':
            lab_sharp(call.message, -1)
    except AttributeError:
        print('', end='')




@bot.message_handler(commands=['update'])
def update(message):
    print(message.text)
    if message.from_user.id == 850966027:
        update_data_users()
        update_data_places()
        bot.reply_to(message, '–æ–±–Ω–æ–≤–∏–ª')
    else:
        bot.reply_to(message, '–Ω–µ –¥–ª—è —Ç–µ–±—è –∫–æ–º–∞–Ω–¥–∞')


@bot.message_handler(commands=['news'])
def news(message):

    print(message.text)
    ind = ind_check(message.from_user.id)
    if ind != -1:
        if users[ind].role == 'officer':
            _text = message.text.split('/news ')
            for i in users:
                bot.send_message(i.uid, _text[1] + '\n\n–ò –ø–æ–º–Ω–∏—Ç–µ: üè¢ –ò–º–ø–µ—Ä–∏—è –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –≤–∞—Å!')


@bot.message_handler(commands=['set_timezone'])
def time_zone_reply(message):
    if message.chat.id != message.from_user.id:
        bot.reply_to(message, '—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ')
    else:
        ind = ind_check(message.from_user.id)
        if ind == -1:
            bot.reply_to(message,
                         '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç @HyperionGameBot')
        else:
            sent = bot.reply_to(message,
                                '–æ–∫–µ–π, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é (–∑–æ–Ω—É –≤—Ä–µ–º–µ–Ω–∏?). –ù–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã —É —Ç–µ–±—è –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ –ø–æ –ú–°–ö - –æ—Ç–ø—Ä–∞–≤—å 3, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è –ø–æ –ú–°–ö - UTC+3')
            bot.register_next_step_handler(sent, setting_time_zone)


# Handle '/start' and '/help'
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, """\
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üè¢ –≠–Ω–¥–∏–º–∏–æ–Ω!
—è - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∞—à–∏–º –≥–æ—Ä–æ–¥–æ–º.
–æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –∏–≥—Ä—ã @HyperionGameBot.
""")


@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.reply_to(message, """\
–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:
/help - –≤—ã–∑–æ–≤ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
/prof_who - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å–æ–æ—Ç—Ä—è–¥–æ–≤—Ü–µ–≤
/me - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å(–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–µ –∫–∞–∫ –º–æ–∂–Ω–æ —á–∞—â–µ)
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞)
/res - –≤—Ä–µ–º—è –¥–æ —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
/set_timezone - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –ø–æ UTC (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞)
""")





@bot.message_handler(commands=['res'])
def res_command(message):
    res_time(message, False)


@bot.message_handler(commands=['prof_who'])
def res_command(message):
    s = ''
    for i in users:
        fl = True
        for j in cities:
            if i.city == j[1]:
                s += j[0]
                fl = False
        if fl:
            s += '‚ùì'
        s += i.name + ': ' + i.prof.split("|–£—Ä–æ–≤–µ–Ω—å: ")[0] + ', ' + i.prof.split("|–£—Ä–æ–≤–µ–Ω—å: ")[
            1] + '\n' if i.prof != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' else i.name + ': ' + i.prof + '\n'
    bot.reply_to(message, s)


@bot.message_handler(commands=['me'])
def send_welcome(message):
    send_profile(message)


@bot.message_handler(commands=['raids'])
def send_raids(message):
    send_raid(message, 2)


@bot.message_handler(content_types=['photo'])
def message_pocessing(message):
    message_processing(message, False)
    # bot.reply_to(message, '–∞–±–æ–±–∞')


@bot.message_handler(commands=['settings'])
def settings_processing(message):
    ind = ind_check(message.from_user.id)
    if ind == -1:
        bot.reply_to(message, f'@{message.from_user.username},–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—ã–∫–∞—Ç—å, –Ω—É–∂–Ω–æ –±—ã—Ç—å –≤ –º–æ–µ–π –±–∞–∑–µ')
    else:
        kb = telebot.types.InlineKeyboardMarkup(row_width=1)
        s = '‚úÖ' if users[ind].boss_ping else '‚õîÔ∏è'
        btn1 = telebot.types.InlineKeyboardButton(text=f"–ü–∏–Ω–≥–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Å—Å–æ–≤ {s}", callback_data='settings_boss_ping')
        kb.add(btn1)
        bot.reply_to(message, '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=kb)


@bot.message_handler()
def messag_pocessing(message):
    # bot.reply_to(message, '–∞–±–æ–±–∞2')
    message_processing(message, True)

def setting_time_zone(message):
    try:
        k = int(message.text)
        ind = ind_check(message.from_user.id)
        users[ind].timezone = k
        update_data_users()
        bot.reply_to(message, '–∞–≥–∞, –∑–∞–ø–∏—Å–∞–ª')
    except:
        bot.reply_to(message, '–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ')


def message_processing(message, flag):
    try:
        print('—Å–æ–æ–±—â–µ–Ω–∏–µ: ', message.text[:10])
        _text = message.text if flag else message.caption
        # print(message.forward_from.id)
        if _text == '–®—Ç—ã—É—Å, –ø—Ä–æ—Ñ–∏–ª—å':
            # print('huy52')
            send_profile(message)
        if message.from_user.id == 589732215 and int((random.randint(1, 1000))) == 7:
            bot.reply_to(message, '–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê, –ñ–ï–ù–©–ò–ù–ê')
        if message.forward_from.id == 820567103:
            if _text.count('–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å —Å–ª—ã—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ - –Ω–∞–∂–º–∏ /toggle_radio') == 0:
                if _text.count('–ì—Ä—É–ø–ø–∞ –æ—Ç—Ä—è–¥–∞ ') == 1:
                    if message.forward_date + 300 >= time.time():
                        s1 = '–ü–∏–Ω–≥!\n'
                        _text = re.split('–ì—Ä—É–ø–ø–∞ –æ—Ç—Ä—è–¥–∞ | —Å–æ–±—Ä–∞–ª–∞—Å—å.|–ó–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è –∏–≥—Ä–æ–∫–∏:\n|\n', _text)[6:]
                        # print(_text)
                        # for i in range(len(users.txt)):
                        # print(users.txt[i].name)
                        kb = telebot.types.InlineKeyboardMarkup(row_width=1)
                        btn1 = telebot.types.InlineKeyboardButton(text="‚úÖ —è –≥–æ—Ç–æ–≤", callback_data='boss_ping')
                        kb.add(btn1)
                        for i in range(len(_text)):
                            fl = True
                            for j in range(len(users)):
                                if users[j].name in _text[i]:
                                    s1 += '@' + users[j].username + '\n'
                                    fl = False
                                    break
                            if fl:
                                s1 += _text[i] + '\n'
                        bot.reply_to(message, s1, reply_markup=kb)
                    else:
                        bot.reply_to(message, '–í—Å–ø–æ–º–Ω–∏–ª —Ç–æ–∂–µ, –∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ —Ç–æ?')
                elif '–¢—Ä–µ–±—É–µ–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:' in _text and '–ö–∞—á–µ—Å—Ç–≤–æ: ' in _text:
                    if message.chat.id == message.from_user.id:
                        ind = ind_check(message.from_user.id)
                        if ind == -1:
                            bot.reply_to(message, '—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –±–æ—Ç–µ')
                        else:
                            lab_func_st(message)
                elif _text.count('UID') == 1 and _text.count('–°–æ–±—ã—Ç–∏–µ') == 1:
                    _text = re.split('üë§ |, | \| |üë®\u200düë®\u200düëß\u200düë¶: |\n\nüó∫:|UID: |\n', _text)
                    # print(_text)
                    if int(_text[-1]) != message.from_user.id:
                        bot.reply_to(message, '—Å–∫–∏–Ω—å –º–Ω–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –∞ –Ω–µ –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ')
                    elif message.forward_date + 300 < time.time():
                        bot.reply_to(message, '—ç—Ç–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç, —è –µ–≥–æ –Ω–µ –ø—Ä–∏–º—É!')
                    else:
                        uid = int(_text[-1])
                        name = _text[3]
                        squad_name = _text[6]
                        # print(name, squad_name, uid)
                        hp, pp, mp, at, df = 0, 0, 0, 0, 0
                        for klol in _text:
                            if klol.count('üîÆ: ') == 1:
                                mp = int(re.split('üîÆ: |/', klol)[2])
                            if klol.count('‚ù§Ô∏è: ') == 1:
                                hp = int(re.split('‚ù§Ô∏è: |/', klol)[2])
                            if klol.count('üí™: ') == 1:
                                pp = int(klol.split('üí™: ')[1])
                            if klol.count('üõ°: ') == 1:
                                df = int(klol.split('üõ°: ')[1])
                            if klol.count('‚öîÔ∏è: ') == 1:
                                at = int(klol.split('‚öîÔ∏è: ')[1])
                        new = True
                        # print(_text)
                        for j in range(len(users)):
                            if users[j].uid == uid:
                                new = False
                                users[j].name = name
                                users[j].squad_name = squad_name
                                users[j].username = message.from_user.username
                                users[j].time = int(message.forward_date)
                                users[j].mana_p = mp
                                users[j].health_p = hp
                                users[j].power_p = pp
                                users[j].attack = at
                                users[j].deff = df
                                # print(_text[4][1:])
                                users[j].city = _text[4][2:]
                                bot.reply_to(message, '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!')
                                update_data_users()
                                break
                        if new:
                            users.append(User(message.from_user.id, message.from_user.username, name, squad_name,
                                              int(message.forward_date), 1, df, at, hp, pp, mp, 'user', True,
                                              _text[4][2:], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 1, 3))
                            print(str(users[-1]))
                            update_data_users()
                            bot.reply_to(message,
                                         '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n/help - –ø–æ–∫–∞–∂–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

                elif _text.count('–ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏–≥—Ä–æ–∫–∏ –∏–∑ –æ—Ç—Ä—è–¥–∞ ') == 1:
                    if message.forward_date + 300 >= time.time():
                        _text = re.split(
                            '–ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏–≥—Ä–æ–∫–∏ –∏–∑ –æ—Ç—Ä—è–¥–∞ |, –∂–µ–ª–∞—é—â–∏–µ –ø–æ–±–µ–¥–∏—Ç—å |\n|–ó–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è –∏–≥—Ä–æ–∫–∏:',
                            _text)
                        # print(_text)
                        s = [[]]
                        ind = 0
                        cnt = 0
                        _squad = _text[1]
                        for i in users:
                            fl = True
                            for j in _text:
                                if i.name in j:
                                    fl = False
                            if fl and _squad in i.squad_name:
                                if i.boss_ping:
                                    s[ind].append('@' + i.username)
                                else:
                                    s[ind].append(i.name)
                                cnt += 1
                                if cnt == 5:
                                    cnt = 0
                                    ind += 1
                                    s.append([])
                        for i in s:
                            strin = _squad + ', –ø–∏—à–µ–º—Å—è –Ω–∞ –±–æ—Å—Å–∞ ' + _text[2] + '\n\n'
                            if len(i)>0:
                                for k in i:
                                    strin += k + '\n'
                                bot.reply_to(message, strin)
                    else:
                        bot.reply_to(message, '—Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
                elif '–°–æ–±—Ä–∞–Ω–æ ' in _text:
                    res_time(message, True)
                elif '–¢—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –±–æ—Å—Å–æ–≤' in _text:
                    bot.reply_to(message, '–≠—Ç–æ—Ç –≥—Ä–µ—Ö –ê–ª–ª–∞—Ö –Ω–µ –ø—Ä–æ—Å—Ç–∏—Ç')
                elif '–°–±—Ä–æ—Å–∏—Ç—å: /reset_spec' in _text:
                    ind = ind_check(message.from_user.id)
                    if ind != -1:
                        fl = False
                        for i in users:
                            if i.prof_time == int(message.forward_date):
                                fl = True
                        if fl:
                            bot.reply_to(message, '–≥–¥–µ-—Ç–æ —è —Ç–∞–∫–æ–µ —É–∂–µ –≤–∏–¥–µ–ª')
                        else:
                            if message.forward_date + 3600 >= int(time.time()):
                                _text = _text.split('\n')
                                s = ''
                                for i in _text:
                                    if '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ' in i:
                                        s += i[16:] + '|'
                                    if '–£—Ä–æ–≤–µ–Ω—å: ' in i:
                                        s += i + ' '
                                    if '–ü—Ä–æ–≥—Ä–µ—Å—Å: ' in i:
                                        s += str(i.count('#'))
                                users[ind].prof = s
                                users[ind].prof_time = int(message.forward_date)
                                bot.reply_to(message, '—Å–æ—Ö—Ä–∞–Ω–∏–ª')
                                update_data_users()
                                users.sort(key=lambda User1: User1.prof)
                            else:
                                bot.reply_to(message, '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–∞–ª–æ—Å—Ç—å —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 1 —á–∞—Å')
                    else:
                        bot.reply_to(message, '—Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–æ—Ñ–∏–ª—å')
                else:
                    for i in range(len(places)):
                        # print(places[i].name)
                        if places[i].name in _text and '‚ÜïÔ∏è' in _text and '‚ÜîÔ∏è' in _text and 'üó∫' in _text:
                            if message.forward_date + 21000 >= int(time.time()):
                                # print(str(places[i]))
                                if places[i].found:
                                    bot.reply_to(message, '–£–∂–µ –Ω–∞—à–ª–∏(')
                                else:
                                    places[i].found = True
                                    for l in range(len(zones)):
                                        if zones[l] in _text:
                                            places[i].zone = l
                                    zwyx = re.split('‚ÜïÔ∏è: |  ‚ÜîÔ∏è: |   üó∫: |\n', _text)
                                    places[i].x = int(zwyx[3])
                                    places[i].y = int(zwyx[2])
                                    update_data_places()
                                    bot.reply_to(message, '–ó–∞–ø–∏—Å–∞–ª')
                            else:
                                bot.reply_to(message, '—Ñ–æ—Ä–≤–∞—Ä–¥ –º–∞–ª–æ—Å—Ç—å —Å—Ç–∞—Ä–æ–≤–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –Ω–∞ —Ç–æ—á–∫—É')

    except AttributeError:
        print('', end='')


def ind_check(uid):
    ind = -1
    for j in range(len(users)):
        if uid == users[j].uid:
            ind = j
    return ind


def send_raid(message, type):
    s = ''
    for i in places:
        if i.found and i._type == type:
            s += f'{i.name}: ‚ÜïÔ∏è:{i.y} ‚ÜîÔ∏è:{i.x} {zones[i.zone]}'
    bot.reply_to(message, s)


def send_profile(message):
    s = '–¢–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç @HyperionGameBot'
    ind = ind_check(message.from_user.id)
    if ind != -1:
        s2 = '‚úÖ–Ø –ø–∏–Ω–≥—É—é –≤–∞—Å –Ω–∞ –±–æ—Å—Å–æ–≤' if users[
            ind].boss_ping else '‚õîÔ∏è–Ø –Ω–µ –ø–∏–Ω–≥—É—é –≤–∞—Å –Ω–∞ –±–æ—Å—Å–æ–≤'
        s3 = ''
        fl = True
        for j in cities:
            if users[ind].city == j[1]:
                s3 = j[0]
                fl = False
        if fl:
            s3 = '‚ùì'
        k = '\n'
        s = f'üë§: {users[ind].name}, {s3} {users[ind].city}\nüë®‚Äçüë®‚Äçüëß‚Äçüë¶: {users[ind].squad_name}\nUID: `{users[ind].uid}`\n\nüí™: {users[ind].power_p}, ‚ù§Ô∏è: {users[ind].health_p}, üîÆ: {users[ind].mana_p}\n‚öîÔ∏è: {users[ind].attack}, üõ°: {users[ind].deff}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: {(int(time.time()) - users[ind].time + 1799) // 3600} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥\n\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {users[ind].prof.split("|")[0] + k + users[ind].prof.split("|")[1] if users[ind].prof != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else users[ind].prof}\n–û–±–Ω–æ–≤–ª–µ–Ω–∞: {(int(time.time()) - users[ind].prof_time + 1799) // 3600} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥\n\n{s2}'
    bot.reply_to(message, s, parse_mode='Markdown')


def update_data_users():
    f = open('users.txt', 'w')
    for i in range(len(users)):
        f.write(str(users[i]))
    f.close()


def update_data_places():
    f = open('places.txt', 'w', encoding='utf-8')
    for i in range(len(places)):
        f.write(str(places[i]))
    f.close()


def res_time(message, fl):
    now_time = int(time.time())
    time_res = 8 * 60 * 60  # 8 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    ind = ind_check(message.from_user.id)
    # if ind != -1:
    if True:
        if fl:
            users[ind].res_time = message.forward_date
            update_data_users()
        if users[ind].res_time + time_res < now_time:
            bot.reply_to(message,
                         '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º, —Ç—ã —É–∂–µ –º–æ–∂–µ—à—å —Å–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã, –ª–∏–±–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤')
        else:
            _time = users[ind].res_time + time_res - now_time
            bot.reply_to(message,
                         f"–¢—ã —Å–º–æ–∂–µ—à—å —Å–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã —á–µ—Ä–µ–∑ {int(_time) // 3600} —á–∞—Å–æ–≤, {int(_time) % 3600 // 60} –º–∏–Ω—É—Ç\n–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {time.strftime('%H:%M:%S', time.localtime(users[ind].res_time + time_res + users[ind].timezone * 3600))}\n\n`‚öíÔ∏è –°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã`",
                         parse_mode='markdown')
    # else:
    #     bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEMFodmPnuIXkaOMzpHeXsv-JOg7ChStwACpSUAAulB4EuYHdg8OtIqejUE',
    #                      protect_content=True)


def lab_func_st(message):
    _text = message.text.split('\n')
    # print(_text)
    koef = 1 if '‚úÖ –ù–∞–¥–µ—Ç–æ' in message.text or '‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫' in message.text else 0
    _hp = int(_text[-7 + koef][:-2])
    s = f'{_text[0]}\n{_text[1]}\n{_text[3]}\n\n{_text[6]}\n'
    for i in _text:
        for j in shmot_dops:
            if j[0] in i:
                s += i
                if j[0] == j[-1]:
                    _stat = int(i.split(j[0])[1])
                    ed_stat = _hp / 200
                    low = int((_stat - 0.5) / ed_stat)
                    high = int((_stat + 0.5) / ed_stat)
                    if high > 25:
                        high = 25
                    if low == high:
                        s += f'   üîÑ: {high}\n'
                    else:
                        s += f'   üîÑ: {low}-{high}\n'
                else:
                    _stat = float(i.split(j[0])[1][:-1])
                    s += f'   üîÑ: {int(_stat / j[1])}\n'
    s += f'\n{_text[-8 + koef]}\n{_text[-7 + koef]}\n{_text[-5 + koef]}'
    bot.reply_to(message, s, reply_markup=lab_kb)


def lab_tun(message, mn=+1):
    # print(str(mn) + 'tun')
    _text = message.text.split('\n')
    s = f'{_text[0]}\n{_text[1]}\n'
    now_tun = int(_text[-1].split('–¢—é–Ω–∏–Ω–≥: ')[1][:-1])
    next_tun = now_tun + mn * 5 if now_tun + mn * 5 >= -95 else -95
    s += f'+{round(int(_text[2][:-1] if not ("‚öîÔ∏è" in _text[2]) else _text[2][:-2]) / (100 + now_tun) * (100 + next_tun))}{_text[2][-1:] if not ("‚öîÔ∏è" in _text[2]) else _text[2][-2:]}\n\n{_text[4]}\n'
    for i in _text:
        for j in shmot_dops:
            if j[0] in i:
                if j[0] == j[-1]:
                    s += f'{j[0]} +{round(int(re.split(f"   üîÑ|{j[0]}", i)[1]) / (100 + now_tun) * (100 + next_tun))}   üîÑ: {i.split("   üîÑ: ")[1]}\n'
                else:
                    s += i + '\n'
    _hp = round(int(_text[-2][:-1]) / (100 + now_tun) * (100 + next_tun))
    s += f'\n{_text[-3]}\n{_hp} {_text[-2][-1]}\n–¢—é–Ω–∏–Ω–≥: {"+" if next_tun >= 0 else ""}{next_tun}%'
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, text=s, reply_markup=lab_kb)
    # print(now_tun)


def lab_sharp(message, mn=+1):
    _text = message.text.split('\n')
    _s = re.split('\(|‚ú®\)', _text[0])
    s = _s[0]
    #print(_s)
    sharp = 0 if len(_s) == 1 else int(_s[1])
    print(sharp)
    s += '\n' if sharp + mn <= 0 else f'(+{sharp + mn}‚ú®)\n'
    s += _text[1] + '\n'
    if mn + sharp >= 0:
        s += f'+{round(int(_text[2][:-1] if not ("‚öîÔ∏è" in _text[2]) else _text[2][:-2]) * ((1.05) ** mn))}{_text[2][-1:] if not ("‚öîÔ∏è" in _text[2]) else _text[2][-2:]}\n'
    else:
        s += _text[2] + '\n'
    for i in range(3, len(_text)):
        s += _text[i] + '\n'

    bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, text=s, reply_markup=lab_kb)


def lab_qual(message, mn=+1):
    _text = message.text.split('\n')


bot.infinity_polling()
polling()
