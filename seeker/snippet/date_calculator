#date: 2025-02-24T16:55:56Z
#url: https://api.github.com/gists/9c0e597bdf485b9e2e82864ea05831dd
#owner: https://api.github.com/users/krassotkin

#!/bin/bash

# Name: date_calculator
#
# Description: A Linux shell script for date calculations.
#
# Author: Alexander Krassotkin (https://krassotkin.com/) with QWEN (https://chat.qwenlm.ai/) and Amazon Q.
#
# Created:  2025-02-24T14:42:13Z
# Modified: 2025-02-24T16:46:53Z
#
# Make the script executable:
# chmod +x date_calculator
#
# Usage:
# ./date_calculator <arg1> <operation> <arg2>
#     <arg1>, <arg2> - ISO 8601 date (YYYY-MM-DD) or number of days
#     <operation> - "+" or "-"
#
# Examples:
# ./date_calculator 2025-02-24 - 1970-12-29
# ./date_calculator 2025-02-24 - 2025-02-23
# ./date_calculator 1970-12-29 + 1
# ./date_calculator 1970-12-29 + 20000
# ./date_calculator 1 + 1970-12-29
# ./date_calculator 1970-12-29 - 1
# ./date_calculator -1 + 1970-12-29
#
# You can integrate the date_calculator script with your `~/.bashrc` by adding the line:
# ```bash
# source /path/to/date_calculator
# ```
# where `/path/to/` is the actual path where you save the `date_calculator` script.
#
# After that, you can run `date_calculator` from anywhere:
# date_calculator 1970-12-29 + 1
#
# Don't forget to refresh already opened terminals the first time with the command:
# source ~/.bashrc

readonly SECONDS_PER_DAY=86400

date_calculator_usage() {
    cat <<EOF

Usage:
    ./date_calculator <arg1> <operation> <arg2>
        <arg1>, <arg2> - ISO 8601 date (YYYY-MM-DD) or number of days
        <operation> - "+" or "-"

Examples:
    ./date_calculator 2025-02-24 - 1970-12-29
    ./date_calculator 2025-02-24 - 2025-02-23
    ./date_calculator 1970-12-29 + 1
    ./date_calculator 1970-12-29 + 20000
    ./date_calculator 1 + 1970-12-29
    ./date_calculator 1970-12-29 - 1
    ./date_calculator -1 + 1970-12-29

Also use shell functions, for exmaple:
date +"%Y-%m-%d"
    print the current date in ISO 8601 format
date +"%A"
    print the current day of the week
date -d "1970-12-29" +"%A"
    print the day of the week for the given date

EOF
}

# Helper function to check if a value is an integer (days)
is_integer() {
    [[ "$1" =~ ^-?[0-9]+$ ]]
}

# Helper function to convert ISO date to Unix timestamp
iso_to_timestamp() {
    date -d "$1" "+%s" 2>/dev/null
}

# Helper function to convert Unix timestamp to ISO date
timestamp_to_iso() {
    date -d "@$1" "+%Y-%m-%d" 2>/dev/null
}

date_calculator() {
    # Check if exactly three arguments are provided
    if [ "$#" -ne 3 ]; then
        echo ""
        echo "Incorrect number of arguments"
        date_calculator_usage
        return 1
    fi
    local arg1="$1"
    local operation="$2"
    local arg2="$3"
    # Validate operation
    if [[ ! "$operation" =~ ^[+-]$ ]]; then
        echo "Invalid operation. Use '+' or '-' only. -"
        return 1
    fi    
    # Validate first arguments
    if is_integer "$arg1"; then
        days1="$arg1"
    else
        timestamp1=$(iso_to_timestamp "$arg1")
        if [ -z "$timestamp1" ]; then
            echo "Invalid ISO date: $arg1"
            return 1
        fi
        days1=$(($timestamp1 / SECONDS_PER_DAY)) # Convert timestamp to days since epoch
    fi
    # Validate secont arguments
    if is_integer "$arg2"; then
        days2="$arg2"
    else
        timestamp2=$(iso_to_timestamp "$arg2")
        if [ -z "$timestamp2" ]; then
            echo "Invalid ISO date: $arg2"
            return 1
        fi
        days2=$(($timestamp2 / SECONDS_PER_DAY)) # Convert timestamp to days since epoch
    fi
    # Process all
    if [ "$operation" = "+" ]; then
        if is_integer "$arg1" && is_integer "$arg2"; then # Both arguments are numbers
            result_days=$((days1 + days2))
            echo "$result_days"
        elif is_integer "$arg1"; then # First argument is days to add
            timestamp2=$(iso_to_timestamp "$arg2")
            result_timestamp=$((timestamp2 + (arg1 * SECONDS_PER_DAY)))
            result_date=$(timestamp_to_iso "$result_timestamp")
            echo "$result_date"   
        elif is_integer "$arg2"; then # Second argument is days to add
            timestamp1=$(iso_to_timestamp "$arg1")
            result_timestamp=$((timestamp1 + (arg2 * SECONDS_PER_DAY)))
            result_date=$(timestamp_to_iso "$result_timestamp")
            echo "$result_date"      
        else # Both arguments are dates - invalid operation
            echo "Error: Cannot add two dates together"
            return 1              
        fi
    else # For "-" operation
        if is_integer "$arg1" && is_integer "$arg2"; then # Both arguments are numbers
            result_days=$((days1 - days2))
            echo "$result_days"
        elif is_integer "$arg2"; then # Second argument is a number (days to subtract)
            result_date=$(timestamp_to_iso $((days1 * SECONDS_PER_DAY - arg2 * SECONDS_PER_DAY)))
            echo "$result_date"
        elif ! is_integer "$arg1" && ! is_integer "$arg2"; then # Both arguments are dates
            result_days=$((days1 - days2))
            echo "$result_days"
        else # First argument is a number and second is a date - invalid operation
            echo "Error: Cannot subtract a date from number of days"
            return 1
        fi
    fi
}

# Only execute if script is run directly (not sourced)
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
    date_calculator "$@"
fi
