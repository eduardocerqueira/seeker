#date: 2024-11-15T17:05:54Z
#url: https://api.github.com/gists/7732c7ab7a1ac7517bac4c7a09fffb32
#owner: https://api.github.com/users/pesokxx

import telebot
from telebot import types
import sqlite3

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "**********"

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = "**********"


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('users.db')
    conn.row_factory = sqlite3.Row
    return conn


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def create_table(conn):
    conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            age INTEGER,
            city TEXT,
            interests TEXT,
            goal TEXT
        )
    ''')
    conn.commit()


@bot.message_handler(commands=['start'])
def start(message):
    with get_db_connection() as conn:
        create_table(conn)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn.execute("DELETE FROM users WHERE user_id=?", (message.from_user.id,))
        conn.commit()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.register_next_step_handler(message, process_name)


def process_name(message):
    with get_db_connection() as conn:
        try:
            name = message.text.strip()

            if not name.isalpha():
                raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")

            conn.execute("UPDATE users SET name=? WHERE user_id=?", (name, message.from_user.id))
            conn.commit()

            bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.")
            bot.register_next_step_handler(message, process_age)
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏: {e}")


def process_age(message):
    with get_db_connection() as conn:
        try:
            age = int(message.text.strip())

            if age < 18 or age > 100:
                raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 18 –∏ 100 –≥–æ–¥–∞–º–∏.")

            conn.execute("UPDATE users SET age=? WHERE user_id=?", (age, message.from_user.id))
            conn.commit()

            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.")
            bot.register_next_step_handler(message, process_city)
        except ValueError as e:
            bot.reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {e}")


def process_city(message):
    with get_db_connection() as conn:
        city = message.text.strip().capitalize()

        if len(city) == 0:
            raise ValueError("–ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

        conn.execute("UPDATE users SET city=? WHERE user_id=?", (city, message.from_user.id))
        conn.commit()

        bot.send_message(
            message.chat.id,
            "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—ã? (–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
        )
        bot.register_next_step_handler(message, process_interests)


def process_interests(message):
    with get_db_connection() as conn:
        interests = message.text.strip().lower()

        if len(interests) == 0:
            raise ValueError("–ò–Ω—Ç–µ—Ä–µ—Å—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")

        conn.execute("UPDATE users SET interests=? WHERE user_id=?", (interests, message.from_user.id))
        conn.commit()

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        button_friends = types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π", callback_data='friends')
        button_partner = types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –ø–∞—Ä—É", callback_data='partner')
        keyboard.add(button_friends, button_partner)

        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å:",
            reply_markup=keyboard
        )


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    with get_db_connection() as conn:
        if call.data in ['friends', 'partner']:
            conn.execute(
                "UPDATE users SET goal=? WHERE user_id=?",
                (call.data, call.from_user.id)
            )
            conn.commit()

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–í–∞—à–∞ —Ü–µ–ª—å: {call.data}. –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!"
            )

            show_matching_profiles(call.message)


def show_matching_profiles(message):
    with get_db_connection() as conn:
        current_user = get_current_user(conn, message.from_user.id)

        if current_user is None:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        query = '''
            SELECT * FROM users
            WHERE user_id != ? AND age = ? AND city = ? AND goal = ?
            ORDER BY RANDOM() LIMIT 10
        '''

        cur = conn.cursor()
        cur.execute(query, (current_user['user_id'], current_user['age'], current_user['city'], current_user['goal']))
        rows = cur.fetchall()


        for row in rows:
            profile = f"""
            –ò–º—è: {row[1]}
            –í–æ–∑—Ä–∞—Å—Ç: {row[2]}
            –ì–æ—Ä–æ–¥: {row[3]}
            –ò–Ω—Ç–µ—Ä–µ—Å—ã: {row[4]}
            –¶–µ–ª—å: {row[5]}
            """

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        like_button = types.InlineKeyboardButton(text="üëç", callback_data=f'like_{row[0]}')
        dislike_button = types.InlineKeyboardButton(text="üëé", callback_data=f'dislike_{row[0]}')
        keyboard.add(like_button, dislike_button)

        bot.send_message(
            message.chat.id,
            profile,
            reply_markup=keyboard
        ) \
 \
        @ bot.callback_query_handler(func=lambda call: call.data.startswith('like_'))


def handle_like(call):
    with get_db_connection() as conn:
        user_id = int(call.data.split('_')[1])
        conn.execute("INSERT INTO matches (user_id, matched_user_id) VALUES (?, ?)", (call.from_user.id, user_id))
        conn.commit()

        bot.answer_callback_query(call.id, "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!")

        show_matching_profiles(call.message) \
 \
        @ bot.callback_query_handler(func=lambda call: call.data.startswith('dislike_'))


def handle_dislike(call):
    bot.answer_callback_query(call.id, "–£–ø—Å, –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å...")

    show_matching_profiles(call.message)


def get_current_user(conn, user_id):
    cur = conn.cursor()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()  # –í—ã–∑—ã–≤–∞–µ–º fetchone() –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞

    if row is None:
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    return {
        'user_id': row[0],
        'name': row[1],
        'age': row[2],
        'city': row[3],
        'interests': row[4],
        'goal': row[5]
    }


if __name__ == '__main__':
    bot.polling(none_stop=True)op=True)