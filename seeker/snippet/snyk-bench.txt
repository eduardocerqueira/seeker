#date: 2025-05-07T16:57:06Z
#url: https://api.github.com/gists/985fb2056a563c9ad5cf29353b474567
#owner: https://api.github.com/users/gregmeszaros

#!/bin/bash

CONCURRENCY=20  # How many to run in parallel
TOTAL_RUNS=100  # Total number of runs
TOKEN= "**********"

# STATS
pass_count=0
vuln_count=0
error_count=0

# TIMER
global_start=$(date +%s)

run_test() {
  local i=$1
  local start=$(date +%s)
  echo "üîÅ [$i] $(date '+%H:%M:%S') Starting snyk test..."

  local output
  output= "**********"="$TOKEN" snyk test 2>/dev/null) # Runs snyk test (command can be customised here)
  local exit_code=$?
  local end=$(date +%s)
  local duration=$(( (end - start) * 1000 ))

  if [[ $exit_code -eq 0 ]]; then
    echo "‚úÖ [$i] No vulns found in ${duration}ms"
    echo "RESULT=pass" > "/tmp/snyk_result_$i"
  elif [[ $exit_code -eq 1 ]]; then
    echo "‚ö†Ô∏è  [$i] Vulns found in ${duration}ms"
    echo "üì§ [$i] Output:"
    echo "$output"
    echo "RESULT=vuln" > "/tmp/snyk_result_$i"
  else
    echo "‚ùå [$i] Error (exit code $exit_code) after ${duration}ms"
    echo "$output"
    echo "RESULT=error" > "/tmp/snyk_result_$i"
  fi
}

export -f run_test
export TOKEN

echo "‚ñ∂Ô∏è Running $TOTAL_RUNS snyk tests with concurrency $CONCURRENCY..."

# Launch parallel jobs
for i in $(seq 1 $TOTAL_RUNS); do
  run_test "$i" &
  while [[ $(jobs -r | wc -l) -ge $CONCURRENCY ]]; do
    sleep 0.1
  done
done

wait

# Aggregate results
for i in $(seq 1 $TOTAL_RUNS); do
  result_file="/tmp/snyk_result_$i"
  if [[ -f "$result_file" ]]; then
    result=$(grep "RESULT=" "$result_file" | cut -d= -f2)
    case $result in
      pass) ((pass_count++)) ;;
      vuln) ((vuln_count++)) ;;
      error) ((error_count++)) ;;
    esac
    rm -f "$result_file"
  fi
done

global_end=$(date +%s)
total_duration=$((global_end - global_start))

# Final summary
echo ""
echo "üìä Performance Summary:"
echo "------------------------"
echo "Total Runs:      $TOTAL_RUNS"
echo "No Vulns (pass): $pass_count"
echo "Vulns Found:     $vuln_count"
echo "Errors:          $error_count"
echo "Total Time:      ${total_duration}s"
echo "Total Time:      ${total_duration}s"