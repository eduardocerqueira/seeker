#date: 2025-07-14T17:01:04Z
#url: https://api.github.com/gists/3a9221d30c5bd03a8649fe754b8b16bc
#owner: https://api.github.com/users/jlow3939

#!/bin/bash

IMAGE="cyberxsecurity/container_project1_v4:latest"
CONTAINER_NAME="capstone"
HOSTNAME="Baker_Street_Linux_Server"
HOST_MOUNT="$HOME/docker_data"
CONTAINER_MOUNT="/data"
TEST_FILE="mounted_successfully.txt"

# Check for rebuild flag
if [[ "$1" == "--rebuild" ]]; then
  echo "Rebuild requested. Stopping and removing existing container..."
  docker stop $CONTAINER_NAME 2>/dev/null
  docker rm $CONTAINER_NAME 2>/dev/null
fi

# Ensure host-side mount directory exists
mkdir -p "$HOST_MOUNT"

# Pull image if not already downloaded
if [[ "$(docker images -q $IMAGE 2> /dev/null)" == "" ]]; then
  echo "Image not found. Pulling image..."
  docker pull $IMAGE
else
  echo "Image already present."
fi

# Check if container exists
if [[ "$(docker ps -a -q -f name=^/${CONTAINER_NAME}$)" == "" ]]; then
  echo "Container not found. Creating and starting container..."
  docker run -d \
    --hostname=$HOSTNAME \
    --name $CONTAINER_NAME \
    -v "$HOST_MOUNT":"$CONTAINER_MOUNT" \
    --restart unless-stopped \
    $IMAGE
else
  # Check if container is running
  if [[ "$(docker ps -q -f name=^/${CONTAINER_NAME}$)" == "" ]]; then
    echo "Container exists but is not running. Starting container..."
    docker start $CONTAINER_NAME
  else
    echo "Container is already running."
  fi
fi

# Write a confirmation file inside the container
echo "Verifying mount..."
docker exec $CONTAINER_NAME /bin/bash -c "echo 'Mount verified on $(date)' > $CONTAINER_MOUNT/$TEST_FILE"

# Check from host side
if [[ -f "$HOST_MOUNT/$TEST_FILE" ]]; then
  echo "Mount confirmed. Found file: $HOST_MOUNT/$TEST_FILE"
else
  echo "Mount may have failed. File not found in host directory."
  echo "Try re-running the script with --rebuild to force a clean container."
fi

# Connect to the container
echo "Connecting to the container..."
docker exec -it $CONTAINER_NAME /bin/bash