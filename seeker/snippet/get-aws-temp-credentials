#date: 2024-05-09T16:45:05Z
#url: https://api.github.com/gists/49143812981778ee543cfce394236ce7
#owner: https://api.github.com/users/sabino

#!/usr/bin/env python3

import json
import os
from glob import glob
from subprocess import Popen, PIPE
import argparse

def get_latest_file_path(directory):
    try:
        files = glob(os.path.join(directory, '*json'))
        return max(files, key=os.path.getctime)
    except ValueError:
        return None

def read_json_file(file_path):
    with open(file_path, 'r') as f:
        return json.load(f)

 "**********"d "**********"e "**********"f "**********"  "**********"g "**********"e "**********"t "**********"_ "**********"a "**********"c "**********"c "**********"e "**********"s "**********"s "**********"_ "**********"t "**********"o "**********"k "**********"e "**********"n "**********"_ "**********"f "**********"r "**********"o "**********"m "**********"_ "**********"c "**********"a "**********"c "**********"h "**********"e "**********"( "**********"c "**********"a "**********"c "**********"h "**********"e "**********"_ "**********"d "**********"i "**********"r "**********") "**********": "**********"
    latest_file_path = get_latest_file_path(cache_dir)
    if not latest_file_path:
        raise FileNotFoundError('No SSO token file found in cache.')
    return read_json_file(latest_file_path).get('accessToken')

def parse_aws_config(profile_name):
    config_file = os.path.expanduser('~/.aws/config')
    with open(config_file, 'r') as f:
        lines = f.read().splitlines()

    profile_key = f'[profile {profile_name}]'
    profile_data = {}
    capture = False
    for line in lines:
        if line.strip() == profile_key:
            capture = True
        elif capture and line.startswith('[') and line.endswith(']'):
            break
        elif capture and '=' in line:
            key, value = map(str.strip, line.split('=', 1))
            profile_data[key] = value

    return profile_data

def execute_aws_cli_command(command):
    process = Popen(command, stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate()
    
    if stderr:
        raise RuntimeError(stderr.decode("utf-8"))
    
    return stdout.decode("utf-8")

 "**********"d "**********"e "**********"f "**********"  "**********"g "**********"e "**********"t "**********"_ "**********"r "**********"o "**********"l "**********"e "**********"_ "**********"c "**********"r "**********"e "**********"d "**********"e "**********"n "**********"t "**********"i "**********"a "**********"l "**********"s "**********"( "**********"p "**********"r "**********"o "**********"f "**********"i "**********"l "**********"e "**********"_ "**********"c "**********"o "**********"n "**********"f "**********"i "**********"g "**********", "**********"  "**********"a "**********"c "**********"c "**********"e "**********"s "**********"s "**********"_ "**********"t "**********"o "**********"k "**********"e "**********"n "**********") "**********": "**********"
    command = [
        'aws', 'sso', 'get-role-credentials',
        '--account-id', profile_config['sso_account_id'],
        '--role-name', profile_config['sso_role_name'],
        '--access-token', access_token,
        '--region', profile_config['region'],
        '--output', 'json'
    ]
    
    credentials_json = execute_aws_cli_command(command)
    
    return json.loads(credentials_json)

def main(profile_name):
    cache_dir = os.path.expanduser('~/.aws/sso/cache/')
    
    access_token = "**********"
    
    profile_config = parse_aws_config(profile_name)
    
    credentials = "**********"
    
    print(json.dumps(credentials, indent=4))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Retrieve AWS SSO role credentials for a given profile.')
    
    parser.add_argument('profile_name', help='The name of the AWS profile to retrieve credentials for.')
    
    args = parser.parse_args()
    
    try:
        main(args.profile_name)
    except Exception as e:
        print(f'Error: {e}')
