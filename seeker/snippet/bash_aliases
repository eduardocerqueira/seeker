#date: 2023-02-14T16:50:36Z
#url: https://api.github.com/gists/ee5adc8ee4b4dc2388ec450e3e7e5798
#owner: https://api.github.com/users/rulanov

# My time savers. Some aliases could be macOS-specific, most should work on any Linux/Unix distros.

### Generic
alias ll='ls -halFtr'
alias ping='ping -c 10'
alias ff='find . -name $1'
alias cd..='cd ..'

### Networking
alias myip='ifconfig | grep ": active" -B 7 | grep "inet " | sed -e "s/^[[:space:]]//"'
alias mypubip='curl ifconfig.me'
alias ports='sudo lsof -i -P | grep -i "listen"'
alias ports2='netstat -tulpn | grep LISTEN'
alias rsynk='rsync -avzhe ssh --progress'
function cert-pull()
{
    echo | (openssl s_client -connect $1 2>/dev/null) | openssl x509 -noout -text
}

### Docker
alias k='kubectl'
alias d='docker'
function dbash()
{
    # Open bash shell session inside of container
    docker exec -it "$1" bash
}
function dps
{
    # Short listing of all running containers
    docker ps -a --format 'table {{ .Names }}\t{{ .Image }}\t{{ .Ports }}\t{{.Status}}'
}
alias dips="docker ps -q | xargs docker inspect --format '{{ .NetworkSettings.IPAddress }} - {{ .Name }} - {{ .Id }}'"
function docker-ips()
{
    docker ps | while read line; do
        if `echo $line | grep -q 'CONTAINER ID'`; then
            echo -e "IP ADDRESS\t$line"
        else
            CID=$(echo $line | awk '{print $1}');
            IP=$(docker inspect -f "{{ .NetworkSettings.IPAddress }}" $CID);
            printf "${IP}\t${line}\n"
        fi
    done;
}

### Crypto
function cat-der()
{
    # Parse DER-encoded certificate
    [ "$#" -eq 1 ] || ( echo "Usage: cat-der <der_file>" && kill -INT $$ )
    openssl x509 -inform der -noout -text -in "$1"
}
function cat-pem()
{
    # Parse PEM-encoded certificate
    [ "$#" -eq 1 ] || ( echo "Usage: cat-pem <pem_file>" && kill -INT $$ )
    openssl x509 -inform pem -noout -text -in "$1"
}
function cat-chain()
{
    # Parse multi-certificate PEM-encoded file
    CERT_CHAIN=$1
    if [ -z ${CERT_CHAIN} ]; then
        echo "ERROR: Missing certificate path"
        exit 1
    else
        echo "Certificate: ${CERT_CHAIN}"
        openssl crl2pkcs7 -nocrl -certfile "${CERT_CHAIN}" | openssl pkcs7 -print_certs -text -noout
    fi
}
function topk8()
{
    # Encrypt private key as PKCS8
    IN_KEY=$1
    PASS=$2
    OUT_PREFIX=${3:=my}
    openssl rsa -aes192 -in ${IN_KEY} -out ${OUT_PREFIX}-key-aes.pem -passin pass:${PASS}
    openssl pkcs8 -topk8 -inform PEM -outform PEM -in ${OUT_PREFIX}-key-aes.pem -out ${OUT_PREFIX}-key-p8.pem -v2 aes-192-cbc -passin pass:${PASS}
    rm ${OUT_PREFIX}-key-aes.pem
}