#date: 2025-10-02T16:52:13Z
#url: https://api.github.com/gists/05405a99d058b341299063286c011f3f
#owner: https://api.github.com/users/jdgregson

#!/usr/bin/env python3
import sqlite3
import uuid
from datetime import datetime, timedelta

class AuthDB:
    def __init__(self, db_path='auth.db'):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        conn.execute('''
            CREATE TABLE IF NOT EXISTS image_ownership (
                image_id TEXT PRIMARY KEY,
                client_token TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()

 "**********"  "**********"  "**********"  "**********"  "**********"d "**********"e "**********"f "**********"  "**********"r "**********"e "**********"g "**********"i "**********"s "**********"t "**********"e "**********"r "**********"_ "**********"i "**********"m "**********"a "**********"g "**********"e "**********"( "**********"s "**********"e "**********"l "**********"f "**********", "**********"  "**********"i "**********"m "**********"a "**********"g "**********"e "**********"_ "**********"i "**********"d "**********", "**********"  "**********"c "**********"l "**********"i "**********"e "**********"n "**********"t "**********"_ "**********"t "**********"o "**********"k "**********"e "**********"n "**********") "**********": "**********"
        conn = sqlite3.connect(self.db_path)
        conn.execute('INSERT INTO image_ownership (image_id, client_token) VALUES (?, ?)',
                    (image_id, client_token))
        conn.commit()
        conn.close()

 "**********"  "**********"  "**********"  "**********"  "**********"d "**********"e "**********"f "**********"  "**********"v "**********"e "**********"r "**********"i "**********"f "**********"y "**********"_ "**********"a "**********"c "**********"c "**********"e "**********"s "**********"s "**********"( "**********"s "**********"e "**********"l "**********"f "**********", "**********"  "**********"i "**********"m "**********"a "**********"g "**********"e "**********"_ "**********"i "**********"d "**********", "**********"  "**********"c "**********"l "**********"i "**********"e "**********"n "**********"t "**********"_ "**********"t "**********"o "**********"k "**********"e "**********"n "**********") "**********": "**********"
        conn = sqlite3.connect(self.db_path)
        result = "**********"= ?',
                             (image_id,)).fetchone()
        conn.close()
 "**********"  "**********"  "**********"  "**********"  "**********"  "**********"  "**********"  "**********"  "**********"r "**********"e "**********"t "**********"u "**********"r "**********"n "**********"  "**********"r "**********"e "**********"s "**********"u "**********"l "**********"t "**********"  "**********"a "**********"n "**********"d "**********"  "**********"r "**********"e "**********"s "**********"u "**********"l "**********"t "**********"[ "**********"0 "**********"] "**********"  "**********"= "**********"= "**********"  "**********"c "**********"l "**********"i "**********"e "**********"n "**********"t "**********"_ "**********"t "**********"o "**********"k "**********"e "**********"n "**********"

    def cleanup_old_images(self, days=30):
        conn = sqlite3.connect(self.db_path)
        cutoff = datetime.now() - timedelta(days=days)
        conn.execute('DELETE FROM image_ownership WHERE created_at < ?', (cutoff,))
        conn.commit()
        conn.close()