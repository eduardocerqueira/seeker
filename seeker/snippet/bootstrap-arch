#date: 2022-12-30T16:49:18Z
#url: https://api.github.com/gists/427ce24e3236a52423db77c0a9a1034d
#owner: https://api.github.com/users/sjonnet

#!/bin/bash
# Boostrap Arch

# HD Configuration
# Run "lsblk" to determine HD device name
# To check for TRIM support, run "lsblk --discard". If DISC-GRAN && DISC-MAX are > 0, your HD supports TRIM.
# If running as VM, you'll need to double check if TRIM is supported.  Newer KVM/Qemu VMs should support TRIM.
HD_DEVICE="" # /dev/sda /dev/nvme0n1 /dev/vda
TRIM_SUPPORT="true" # typically set to true if HD is an SSD, see notes above
SWAPFILE_SIZE="2048" # 4096 8912 (in MiB)

# CPU Configuration
# Note: if installing in a VM leave both set to 'false'
AMD_CPU="false"
INTEL_CPU="false"

# GPU Configuration
AMD_GPU="false"
INTEL_GPU="false"

# Install Xorg and configure Gnome to use it by default?
# If set to "false" Gnome will be configured to use Wayland by default
XORG_INSTALL="false"

# Hostname to ping to check network connection
PING_HOSTNAME="www.google.com"

# Hostname Configuration
HOSTNAME="arch"

# Locale Configuration
# To list out all timezones in a given region run "ls -l /usr/share/zoneinfo/{region}" e.g. "ls -l /usr/share/zoneinfo/America"
# To list out all timezones run "timedatectl list-timezones"
# To examine available locales look in /etc/locale.gen, first column is used for LANG, both columns together are used for LOCALE
KEYS="us"
TIMEZONE="/usr/share/zoneinfo/America/New_York"
LOCALE="en_US.UTF-8 UTF-8"
LANG="en_US.UTF-8"
REFLECTOR_COUNTRY="United States"

# User Configuration
ROOT_PASSWORD= "**********"
USER_NAME=""
USER_PASSWORD= "**********"

# Additional Linux Command Line Params
CMDLINE_LINUX="" #"msr.allow_writes=on"

PACMAN_ARGS=""

# Update system clock
timedatectl set-ntp true

# Select the fastest pacman mirrors
reflector --verbose --country "$REFLECTOR_COUNTRY" --latest 25 --sort rate --save /etc/pacman.d/mirrorlist

# Partion the drive with a single 512 MB ESP partition, and the rest of the drive as the root partition
parted -s $HD_DEVICE mklabel gpt mkpart ESP fat32 1MiB 512MiB mkpart root ext4 512MiB 100% set 1 esp on

# Is the the hard drive an NVME SSD?
if [[ -n "$(echo $HD_DEVICE | grep "^/dev/nvme")" ]]; then
    BOOT_PARTITION="${HD_DEVICE}p1"
    ROOTFS_PARTITION="${HD_DEVICE}p2"
else
    BOOT_PARTITION="${HD_DEVICE}1"
    ROOTFS_PARTITION="${HD_DEVICE}2"
fi

# Create the filesystem for the ESP partition
mkfs.fat -n ESP -F32 $BOOT_PARTITION

# Create the filesystem for the root partition
yes | mkfs.ext4 -L ROOT $ROOTFS_PARTITION

# Mount the root partition
mount -o defaults,noatime $ROOTFS_PARTITION /mnt

# Create directory to support mounting ESP
mkdir /mnt/boot

# Mount the ESP partition
mount -o defaults,noatime $BOOT_PARTITION /mnt/boot

# Build out swapfile
local SWAPFILE="/swapfile"
fallocate --length ${SWAPFILE_SIZE}MiB /mnt"$SWAPFILE"
chown root /mnt"$SWAPFILE"
chmod 600 /mnt"$SWAPFILE"
mkswap /mnt"$SWAPFILE"

# Install essential packages
arch-chroot /mnt pacman -S --noconfirm --needed $PACMAN_ARGS \
    base-devel              `# Core development libraries (gcc, etc.)` \
    linux linux-headers     `# Linux kernel and headers` \
    linux-firmware          `# Linux firmawre` \
    fwupd                   `# Support for updating firmware from Linux Vendor Firmware Service [https://fwupd.org/]` \
    man-db man-pages        `# man pages` \
    texinfo                 `# GUN documentation format` \
    dosfstools exfatprogs   `# Tools and utilities for FAT and exFAT filesystems` \
    e2fsprogs               `# Tools and utiltiies for ext filesystems` \
    networkmanager          `# Networkmanager` \
    git                     `# Git` \
    vim                     `# Text editor` \
    cpupower                `# Tool for managing your CPU frequency and governor` \
    reflector               `# Utility to manage pacman mirrors`

# Install additional firmware and uCode
if [[ "$AMD_CPU" == "true" ]]; then
    arch-chroot /mnt pacman -S --noconfirm --needed $PACMAN_ARGS linux-firmware amd-ucode
    local MICROCODE="amd-ucode.img"

elif [[ "$INTEL_CPU" == "true" ]]; then
    arch-chroot /mnt pacman -S --noconfirm --needed $PACMAN_ARGS linux-firmware intel-ucode
    local MICROCODE="intel-ucode.img"
fi

# Enable systemd-resolved local caching DNS provider
# Note: NetworkManager uses systemd-resolved by default
arch-chroot /mnt systemctl enable systemd-resolved.service

# Enable NetworkManager.service
# Note: NetworkManager will handle DHCP
arch-chroot /mnt systemctl enable NetworkManager.service

# Enable bluetooth.service
arch-chroot /mnt systemctl enable bluetooth.service

# Configure color support for pacman
arch-chroot /mnt sed -i 's/#Color/Color/' /etc/pacman.conf

# Enable multilib
arch-chroot /mnt sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
arch-chroot /mnt pacman -Syyu $PACMAN_ARGS

# Generate initial fstab using UUIDs
genfstab -U /mnt > /mnt/etc/fstab

# Create a dedicated entry for swapfile
echo "# swapfile" >> /mnt/etc/fstab
echo "$SWAPFILE none swap defaults 0 0" >> /mnt/etc/fstab
echo "" >> /mnt/etc/fstab

# Configure swappiness paramater (default=60) to improve system responsiveness
echo "vm.swappiness=10" > /mnt/etc/sysctl.d/99-sysctl.conf

# Enable periodic trim if the HD supports TRIM
if [[ "$TRIM_SUPPORT" == "true" ]]; then
    arch-chroot /mnt systemctl enable fstrim.timer
fi

# Configure timezone and system clock
arch-chroot /mnt ln -s -f $TIMEZONE /etc/localtime
arch-chroot /mnt hwclock --systohc

# Configure locale
arch-chroot /mnt sed -i "s/#$LOCALE/$LOCALE/" /etc/locale.gen
arch-chroot /mnt locale-gen
echo -e "LANG=$LANG" >> /mnt/etc/locale.conf

# Configure keymap for virtual console (tty)
echo -e "KEYMAP=$KEYS" > /mnt/etc/vconsole.conf

# Configure hostname and hosts files
echo $HOSTNAME > /mnt/etc/hostname
echo "127.0.0.1	localhost" >> /mnt/etc/hosts
echo "::1 localhost" >> /mnt/etc/hosts
echo "127.0.0.1	${HOSTNAME}.localdomain $HOSTNAME" >> /mnt/etc/hosts

# Configure root password
printf "$ROOT_PASSWORD\n$ROOT_PASSWORD" | arch-chroot /mnt passwd

# Configure reflector
echo "--save /etc/pacman.d/mirrorlist" > /mnt/etc/xdg/reflector/reflector.conf
echo "--country \"$REFLECTOR_COUNTRY\"" >> /mnt/etc/xdg/reflector/reflector.conf
echo "--protocol https" >> /mnt/etc/xdg/reflector/reflector.conf
echo "--latest 15" >> /mnt/etc/xdg/reflector/reflector.conf
echo "--sort rate" >> /mnt/etc/xdg/reflector/reflector.conf

CMDLINE_LINUX=$(trim_variable "$CMDLINE_LINUX")

# Standard hooks for /etc/mkinitcpio.conf with systemd boot support
MKINITCPIO_HOOKS="base systemd autodetect keyboard sd-vconsole modconf block fsck filesystems"

# Modules for /etc/mkinitcpio.conf based on GPU
if [[ "$INTEL_GPU" == "true" ]]; then
    MKINITCPIO_MODULES="i915"
fi

if [[ "$AMD_GPU" == "true" ]]; then
    MKINITCPIO_MODULES="amdgpu"
fi

# Update /etc/mkinitcpio.conf with hooks and modules
arch-chroot /mnt sed -i "s/^HOOKS=(.*)$/HOOKS=($MKINITCPIO_HOOKS)/" /etc/mkinitcpio.conf
arch-chroot /mnt sed -i "s/^MODULES=(.*)$/MODULES=($MKINITCPIO_MODULES)/" /etc/mkinitcpio.conf

# Need to rebuild the initramfs after updating hooks and modules
arch-chroot /mnt mkinitcpio -P

# Setup user and allow user to use "sudo"
arch-chroot /mnt useradd -m -G wheel,storage,optical -s /bin/bash $USER_NAME
printf "$USER_PASSWORD\n$USER_PASSWORD" | arch-chroot /mnt passwd $USER_NAME
arch-chroot /mnt sed -i 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers

UUID_ROOTFS_PARTITION=$(blkid -s UUID -o value "$ROOTFS_PARTITION")
CMDLINE_LINUX_ROOT="root=UUID=$UUID_ROOTFS_PARTITION"

arch-chroot /mnt systemd-machine-id-setup
arch-chroot /mnt bootctl install

arch-chroot /mnt mkdir -p /boot/loader
arch-chroot /mnt mkdir -p /boot/loader/entries

# Main systemd-boot config
echo "timeout 5" >> "/mnt/boot/loader/loader.conf"
echo "default archlinux.conf" >> "/mnt/boot/loader/loader.conf"
echo "editor 1" >> "/mnt/boot/loader/loader.conf"

# Config for normal boot
echo "title Arch Linux" >> "/mnt/boot/loader/entries/archlinux.conf"
echo "efi /vmlinuz-linux" >> "/mnt/boot/loader/entries/archlinux.conf"
if [ -n "$MICROCODE" ]; then
    echo "initrd /$MICROCODE" >> "/mnt/boot/loader/entries/archlinux.conf"
fi
echo "initrd /initramfs-linux.img" >> "/mnt/boot/loader/entries/archlinux.conf"
echo "options initrd=initramfs-linux.img $CMDLINE_LINUX_ROOT rw $CMDLINE_LINUX" >> "/mnt/boot/loader/entries/archlinux.conf"

# Config for booting into terminal only
echo "title Arch Linux (terminal)" >> "/mnt/boot/loader/entries/archlinux-terminal.conf"
echo "efi /vmlinuz-linux" >> "/mnt/boot/loader/entries/archlinux-terminal.conf"
if [ -n "$MICROCODE" ]; then
    echo "initrd /$MICROCODE" >> "/mnt/boot/loader/entries/archlinux-terminal.conf"
fi
echo "initrd /initramfs-linux.img" >> "/mnt/boot/loader/entries/archlinux-terminal.conf"
echo "options initrd=initramfs-linux.img $CMDLINE_LINUX_ROOT rw $CMDLINE_LINUX systemd.unit=multi-user.target" >> "/mnt/boot/loader/entries/archlinux-terminal.conf"

# Config for fallback boot (uses old initramfs)
echo "title Arch Linux (fallback)" >> "/mnt/boot/loader/entries/archlinux-fallback.conf"
echo "efi /vmlinuz-linux" >> "/mnt/boot/loader/entries/archlinux-fallback.conf"
if [ -n "$MICROCODE" ]; then
    echo "initrd /$MICROCODE" >> "/mnt/boot/loader/entries/archlinux-fallback.conf"
fi
echo "initrd /initramfs-linux-fallback.img" >> "/mnt/boot/loader/entries/archlinux-fallback.conf"
echo "options initrd=initramfs-linux-fallback.img $CMDLINE_LINUX_ROOT rw $CMDLINE_LINUX" >> "/mnt/boot/loader/entries/archlinux-fallback.conf"

# Install Gnome
arch-chroot /mnt pacman -S --noconfirm --needed $PACMAN_ARGS \
    gnome                       `# Gnome DE` \
    gnome-themes-extra          `# Adwaita-dark theme for legacy GTK apps` \
    gnome-tweaks                `# Gnome tweak tool` \
    pipewire wireplumber        `# Pipewire and wireplumber session manager` \
    pipewire-pulse              `# Pipewire drop in replacement for PulseAudio` \
    pipewire-jack               `# Pipewire JACK support` \
    gst-plugin-pipewire         `# Additional GStreamer plugins` \
    gst-libav \
    gst-plugins-good \
    gst-plugins-bad \
    gst-plugins-ugly \
    gstreamer-vaapi \
    xdg-desktop-portal          `# Support for screensharing in pipewire for Gnome` \
    xdg-desktop-portal-gtk \
    xdg-desktop-portal-gnome \
    noto-fonts noto-fonts-emoji `# Noto fonts to support emojis` \
    rust                        `# Rust for paru AUR helper`

# Install KDE
# arch-chroot /mnt pacman -S --noconfirm --needed \
#    plasma plasma-wayland-session       `# KDE Plasma + Wayland Support` \
#    plasma-nm                           `# NetworkManager applet` \
#    kwallet kwallet-pam kwalletmanager  `# KWallet subsystem` \
#    konsole                             `# Common KDE apps and utilities` \
#    dolphin dolphin-plugins ark \
#    kdenetwork-filesharing \
#    kdegraphics-thumbnailers \
#    ffmpegthumbs \
#    okular gwenview kwrite kcalc \
#    kimageformats qt5-imageformats \
#    kcharselect \
#    partitionmanager \
#    ksystemlog \
#    pipewire wireplumber                `# Pipewire and wireplumber session manager` \
#    pipewire-pulse                      `# Pipewire drop in replacement for PulseAudio` \
#    pipewire-jack                       `# Pipewire JACK support` \
#    xdg-desktop-portal                  `# Support for screensharing in pipewire for KDE` \
#    xdg-desktop-portal-kde \
#    noto-fonts noto-fonts-emoji         `# Noto fonts to support emojis` \
#    phonon-qt5-gstreamer                `# GStreamer backend for QT5 phonon` \
#    gst-plugin-pipewire                 `# Additional GStreamer plugins` \
#    gst-libav \
#    gst-plugins-base \
#    gst-plugins-good \
#    gst-plugins-bad \
#    gst-plugins-ugly \
#    gstreamer-vaapi \
#    rust                                `# Rust for paru AUR helper`

# Note: systemctl enable --user doesn't work via arch-chroot, performing manual creation of symlinks
# systemctl enable --user --now pipewire.service
# systemctl enable --user --now pipewire-pulse.service
arch-chroot -u $USER_NAME /mnt mkdir -p /home/${USER_NAME}/.config/systemd/user/default.target.wants
arch-chroot -u $USER_NAME /mnt mkdir -p /home/${USER_NAME}/.config/systemd/user/sockets.target.wants

arch-chroot -u $USER_NAME /mnt ln -s /usr/lib/systemd/user/pipewire.service /home/${USER_NAME}/.config/systemd/user/default.target.wants/pipewire.service
arch-chroot -u $USER_NAME /mnt ln -s /usr/lib/systemd/user/pipewire.socket /home/${USER_NAME}/.config/systemd/user/sockets.target.wants/pipewire.socket

arch-chroot -u $USER_NAME /mnt ln -s /usr/lib/systemd/user/pipewire-pulse.service /home/${USER_NAME}/.config/systemd/user/default.target.wants/pipewire-pulse.service
arch-chroot -u $USER_NAME /mnt ln -s /usr/lib/systemd/user/pipewire-pulse.socket /home/${USER_NAME}/.config/systemd/user/sockets.target.wants/pipewire-pulse.socket

# systemctl enable --user --now wireplumber.service
arch-chroot -u $USER_NAME /mnt mkdir -p /home/${USER_NAME}/.config/systemd/user/pipewire.service.wants

arch-chroot -u $USER_NAME /mnt ln -s /usr/lib/systemd/user/wireplumber.service /home/${USER_NAME}/.config/systemd/user/pipewire-session-manager.service
arch-chroot -u $USER_NAME /mnt ln -s /usr/lib/systemd/user/wireplumber.service /home/${USER_NAME}/.config/systemd/user/pipewire.service.wants/wireplumber.service

# Xorg installs
if [[ "$XORG_INSTALL" == "true" ]]; then
    arch-chroot /mnt sed -i "s/#WaylandEnable=false/WaylandEnable=false/" /etc/gdm/custom.conf
fi

arch-chroot /mnt systemctl enable gdm.service

# Install GPU Drivers
COMMON_VULKAN_PACKAGES="vulkan-icd-loader lib32-vulkan-icd-loader vulkan-tools"

# Drivers for VM guest installations
if [[ "$INTEL_GPU" == "false" && "$AMD_GPU" == "false" ]]; then
    arch-chroot /mnt pacman -S --noconfirm --needed $PACMAN_ARGS $COMMON_VULKAN_PACKAGES mesa lib32-mesa
fi

if [[ "$INTEL_GPU" == "true" ]]; then
    # Note: installing newer intel-media-driver (iHD) instead of libva-intel-driver (i965)
    # Intel drivers only supports VA-API
    arch-chroot /mnt pacman -S --noconfirm --needed $PACMAN_ARGS $COMMON_VULKAN_PACKAGES mesa lib32-mesa vulkan-intel lib32-vulkan-intel intel-media-driver libva-utils
    arch-chroot /mnt echo "LIBVA_DRIVER_NAME=iHD" >> /etc/environment
fi

if [[ "$AMD_GPU" == "true" ]]; then
    # AMDGPU supports both VA-API and VDPAU, but we're only installing support for VA-API
    arch-chroot /mnt pacman -S --noconfirm --needed $PACMAN_ARGS $COMMON_VULKAN_PACKAGES mesa lib32-mesa vulkan-radeon lib32-vulkan-radeon libva-mesa-driver lib32-libva-mesa-driver libva-utils
    arch-chroot /mnt echo "LIBVA_DRIVER_NAME=radeonsi" >> /etc/environment
fi