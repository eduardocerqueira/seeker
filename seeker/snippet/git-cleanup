#date: 2023-08-01T16:45:37Z
#url: https://api.github.com/gists/f3b2c9a96ddcfa461d63b39b276f51f4
#owner: https://api.github.com/users/hamdrew

#!/bin/bash
# This script aims to keep a developer's clone up-to-date and tidy.
# https://gist.github.com/hamdrew/f3b2c9a96ddcfa461d63b39b276f51f4
# 
# Usage: git cleanup [defaultBranch]

set -e 

bold=$(tput bold)
normal=$(tput sgr0)

defaultBranch="main"
if [[ -n $1 ]]; then
    defaultBranch=$1
fi

# Make sure we're working with the most up-to-date version of $defaultBranch.
echo "${bold}Fetching...${normal}"
git fetch --all

# Prune obsolete remote tracking branches. These are branches that we
# once tracked, but have since been deleted on the remote.
printf "\n"
echo "${bold}Pruning...${normal}"
git remote prune origin

# Checkout default branch
printf "\n"
echo "${bold}Checking out ${defaultBranch}...${normal}" 
git checkout "$defaultBranch"
git pull origin "$defaultBranch"

# List all the branches that have been merged fully into $defaultBranch, and
# then delete them. We use the remote $defaultBranch here, just in case our
# local $defaultBranch is out of date.
#
# DESTRUCTIVE CODE! REMOVE THIS SECTION OF THE SCRIPT IF YOU DO NOT WANT TO ASSUME THIS RISK.
printf "\n"
echo "${bold}Deleting local merged branches...${normal}"
git branch --merged origin/"$defaultBranch" | grep -v "$defaultBranch$" | xargs git branch -d

# Delete squash-and-merged branches
printf "\n"
echo "${bold}Deleting squash-and-merged branches...${normal}" 
git for-each-ref refs/heads/ "--format=%(refname:short)" | while read -r branch; do 
	mergeBase=$(git merge-base "$defaultBranch" "$branch")
	if [[ $(git cherry "$defaultBranch" $(git commit-tree $(git rev-parse "$branch"\^{tree}) -p "$mergeBase" -m _)) == "-"* ]]; then
		git branch -D "${branch}"
	fi
done

# Now the same, but including remote branches.
# DESTRUCTIVE CODE! REMOVE THIS SECTION OF THE SCRIPT IF YOU DO NOT WANT TO ASSUME THIS RISK.
printf "\n"
echo "${bold}Searching for remote merged branches...${normal}"
MERGED_ON_REMOTE=$(git branch -r --merged origin/"$defaultBranch" | sed 's/ *origin\///' | grep -v "$defaultBranch$" || true)

if [ "$MERGED_ON_REMOTE" ]; then
	echo "The following remote branches are fully merged and will be removed:"
	echo "$MERGED_ON_REMOTE"

	read -r -p "Continue (y/N)? "
	if [ "$REPLY" == "y" ]; then
		echo "$MERGED_ON_REMOTE" | xargs -I% git push origin :% 2>&1 | grep --colour=never 'deleted'
		echo "Done!"
	fi
fi

exit 0
