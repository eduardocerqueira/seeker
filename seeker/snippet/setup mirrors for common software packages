#date: 2025-07-18T16:51:21Z
#url: https://api.github.com/gists/100f38e9cb58257f312eaaf52e53a0d2
#owner: https://api.github.com/users/heiyan-2020

#!/bin/bash

#================================================================
# 聚合环境配置脚本
# 功能: 自动为 Conda, Pip, Hugging Face 配置国内镜像源
# 使用: bash setup_mirrors.sh
# 作者: Your Name / AI Assistant
# 日期: 2025-07-19
#================================================================

# 颜色定义 (可选，用于美化输出)
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}=====================================================${NC}"
echo -e "${YELLOW}==   开始配置 Conda, Pip, Hugging Face 镜像源   ==${NC}"
echo -e "${YELLOW}=====================================================${NC}"
echo ""

# --- 1. Pip 换源 ---
echo -e "${GREEN}>>> 正在配置 Pip 镜像源...${NC}"
pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
pip config set global.trusted-host pypi.tuna.tsinghua.edu.cn
echo "Pip 镜像源已设置为清华大学镜像站。"
echo ""

# --- 2. Conda 换源 ---
# 检查 .condarc 文件是否存在，不存在则创建
if [ ! -f ~/.condarc ]; then
    touch ~/.condarc
fi

echo -e "${GREEN}>>> 正在配置 Conda 镜像源...${NC}"
# 使用 TUNA (清华大学) 镜像
# 注意：这会覆盖现有的 .condarc 文件内容
cat > ~/.condarc << EOF
channels:
  - defaults
show_channel_urls: true
default_channels:
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r
  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2
custom_channels:
  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/conda-forge
  msys2: https://mirrors.tuna.tsinghua.edu.cn/msys2
  bioconda: https://mirrors.tuna.tsinghua.edu.cn/bioconda
  menpo: https://mirrors.tuna.tsinghua.edu.cn/menpo
  pytorch: https://mirrors.tuna.tsinghua.edu.cn/pytorch
  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/simpleitk
EOF
echo "Conda 镜像源已设置为清华大学镜像站。配置文件位于 ~/.condarc"
echo "你可以通过 'conda clean -i' 清除索引缓存来使配置生效。"
echo ""

# --- 3. Hugging Face 换源 ---
echo -e "${GREEN}>>> 正在配置 Hugging Face 环境变量...${NC}"
# 社区镜像 hf-mirror.com
HF_ENDPOINT="https://hf-mirror.com"

# 将环境变量写入 shell 配置文件
# 同时兼容 bash 和 zsh
SHELL_CONFIG_FILES=("$HOME/.bashrc" "$HOME/.zshrc")

for config_file in "${SHELL_CONFIG_FILES[@]}"; do
    if [ -f "$config_file" ] || [ "$config_file" == "$HOME/.bashrc" ]; then
        # 检查是否已存在配置
        if ! grep -q "HF_ENDPOINT" "$config_file"; then
            echo "正在向 $config_file 添加 Hugging Face 镜像配置..."
            echo '' >> "$config_file"
            echo '# Hugging Face Mirror Configuration' >> "$config_file"
            echo "export HF_ENDPOINT=\"${HF_ENDPOINT}\"" >> "$config_file"
            # 你也可以同时设置模型下载的缓存目录
            # echo 'export HF_HOME="/path/to/your/cache/dir"' >> "$config_file"
        else
            echo "Hugging Face 镜像配置已存在于 $config_file, 跳过。"
        fi
    fi
done

echo "Hugging Face 镜像源已配置。"
echo -e "${YELLOW}请注意：Hugging Face 的配置需要重启终端或运行 'source ~/.bashrc' (或 'source ~/.zshrc') 后才能生效。${NC}"
echo ""

echo -e "${GREEN}=====================================================${NC}"
echo -e "${GREEN}==             所有配置已完成！                 ==${NC}"
echo -e "${GREEN}=====================================================${NC}"