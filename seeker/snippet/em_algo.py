#date: 2024-06-20T17:04:29Z
#url: https://api.github.com/gists/ae650c7bb34d7dbff2ca81a292aad74d
#owner: https://api.github.com/users/NapoliN

import numpy as np
import math

def initialize_parameters(k, X):
    """
    パラメータを初期化する関数
    k: カテゴリ数
    X: データ
    """
    np.random.seed(0)
    pi = np.random.dirichlet(np.ones(k), size=1)[0]
    lambdas = np.random.rand(k) * np.mean(X)
    return pi, lambdas

def e_step(X, pi, lambdas, k):
    """
    Eステップを実行する関数
    X: データ
    pi: 混合係数
    lambdas: ポアソン分布のパラメータ
    k: カテゴリ数
    """
    n = len(X)
    gamma = np.zeros((n, k))
    
    for i in range(n):
        for j in range(k):
            gamma[i, j] = pi[j] * np.exp(-lambdas[j]) * (lambdas[j] ** X[i]) / math.factorial(X[i])
        gamma[i, :] /= np.sum(gamma[i, :])
    
    return gamma

def m_step(X, gamma, k):
    """
    Mステップを実行する関数
    X: データ
    gamma: 負担率
    k: カテゴリ数
    """
    n = len(X)
    pi = np.sum(gamma, axis=0) / n
    lambdas = np.sum(gamma * X[:, None], axis=0) / np.sum(gamma, axis=0)
    
    return pi, lambdas

def em_algorithm(X, k, tol=1e-6, max_iter=100):
    """
    EMアルゴリズムを実行する関数
    X: データ
    k: カテゴリ数
    tol: 収束判定のための許容誤差
    max_iter: 最大反復回数
    """
    # パラメータの初期化
    pi, lambdas = initialize_parameters(k, X)
    
    for iteration in range(max_iter):
        # Eステップ
        gamma = e_step(X, pi, lambdas, k)
        
        # パラメータの更新
        pi_new, lambdas_new = m_step(X, gamma, k)
        
        # 収束判定
        if np.allclose(pi, pi_new, atol=tol) and np.allclose(lambdas, lambdas_new, atol=tol):
            break
        
        pi, lambdas = pi_new, lambdas_new
    
    return pi, lambdas

X = np.array(
[10, 9, 5, 2, 10, 0, 10, 6, 7, 1, 7, 7, 8, 6, 5, 12, 1, 9, 6, 0, 2, 9, 8, 8, 8, 5, 11, 3, 5, 5, 4, 5, 13, 5, 5, 6, 10, 1, 15, 4, 4, 5, 9, 1, 5, 0, 8, 7, 10, 6, 10, 9, 5, 9, 4, 3, 4, 8, 1, 11, 15, 11, 5, 1, 9, 12, 4, 5, 8, 6, 7, 9, 9, 8, 4, 5, 1, 15, 4, 9, 7, 4, 7, 5, 4, 3, 8, 4, 4, 1, 11, 11, 8, 9, 2, 14, 2, 4, 0, 1, 3, 0, 0, 8, 1, 12, 7, 7, 12, 2, 4, 5, 12, 7, 0, 6, 4, 4, 2, 1, 2, 11, 2, 9, 3, 6, 3, 6, 5, 6, 7, 10, 5, 1, 1, 10, 7, 4, 6, 3, 1, 5, 9, 6, 5, 10, 6, 17, 5, 2, 5, 4, 9, 0, 10, 0, 11, 12, 1, 1, 4, 9, 2, 11, 19, 12, 9, 10, 1, 2, 3, 5, 11, 4, 4, 11, 10, 10, 5, 4, 5, 1, 0, 12, 1, 7, 9, 6, 4, 7, 1, 7, 11, 1, 10, 8, 2, 4, 6, 2, 3, 9, 4, 4, 3, 14, 2, 10, 3, 8, 10, 5, 4, 8, 2, 4, 7, 9, 1, 16, 2, 5, 11, 5, 4, 5, 8, 4, 3, 3, 8, 10, 0, 5, 2, 5, 1, 8, 7, 14, 6, 0, 0, 14, 10, 6, 5, 7, 6, 2, 8, 10, 2, 0, 3, 5, 5, 0, 10, 6, 0, 6, 4, 6, 2, 1, 5, 7, 1, 5, 5, 14, 4, 6, 5, 6, 9, 0, 1, 6, 15, 4, 7, 2, 3, 13, 5, 7, 6, 4, 5, 1, 1, 8, 16, 4, 2, 3, 3, 6, 0, 4, 1, 6, 4, 4, 2, 8, 18, 10, 9, 7, 13, 2, 4, 10, 5, 0, 12, 12, 12, 4, 2, 5, 5, 2, 5, 8, 14, 5, 6, 3, 5, 4, 1, 0, 17, 2, 14, 9, 6, 2, 16, 6, 21, 7, 7, 3, 6, 6, 9, 14, 3, 1, 8, 10, 5, 0, 1, 11, 10, 3, 1, 10, 5, 0, 1, 7, 5, 9, 1, 9, 5, 13, 3, 5, 5, 6, 1, 11, 11, 13, 11, 5, 7, 4, 5, 11, 14, 0, 8, 1, 5, 9, 13, 0, 3, 4, 3, 4, 7, 6, 0, 5, 6, 0, 2, 7, 0, 2, 16, 3, 8, 8, 6, 8, 0, 2, 7, 12, 3, 3, 12, 8, 10, 16, 3, 2, 11, 8, 5, 3, 5, 7, 11, 11, 4, 12, 3, 8, 2, 2, 8, 6, 1, 4, 4, 6, 16, 7, 11, 6, 7, 6, 16, 7, 7, 6, 7, 9, 3, 7, 7, 9, 8, 6, 5, 0, 0, 7, 12, 10, 4, 2, 4, 7, 5, 4, 6, 12, 3, 2, 10, 5, 1, 8, 7, 12, 1, 4, 8, 7, 5, 10, 1, 2, 0, 5, 6, 7, 3, 7, 2, 2, 10, 2, 3, 4, 1, 10, 4, 6, 6, 10, 7, 11, 1, 12, 0, 3, 3, 8, 4, 3, 3, 3, 9, 0, 7, 4, 4, 1, 4, 4, 6, 8, 12, 7, 3, 10, 2, 10, 1, 0, 2, 9, 5, 20, 13, 0, 1, 5, 10, 11, 4, 12, 4, 0, 6, 6, 7, 8, 4, 1, 2, 5, 0, 6, 8, 3, 2, 20, 6, 3, 1, 2, 1, 5, 5, 7, 0, 11, 4, 4, 0, 0, 5, 18, 2, 6, 7, 2, 4, 16, 0, 18, 2, 4, 4, 8, 3, 0, 10, 4, 7, 6, 3, 14, 10, 4, 7, 5, 11, 0, 9, 4, 0, 5, 6, 7, 9, 5, 11, 11, 3, 5, 3, 6, 10, 2, 12, 5, 10, 10, 5, 8, 11, 4, 6, 0, 5, 10, 7, 2, 8, 5, 14, 11, 3, 6, 3, 6, 15, 4, 3, 6, 12, 1, 10, 7, 3, 14, 7, 9, 6, 8, 3, 1, 3, 4, 1, 17, 4, 10, 4, 9, 10, 8, 6, 9, 13, 13, 4, 14, 1, 7, 7, 6, 8, 4, 9, 1, 5, 5, 4, 6, 3, 6, 4, 3, 1, 7, 8, 4, 2, 12, 10, 8, 10, 1, 4, 7, 3, 2, 4, 13, 3, 15, 11, 5, 7, 5, 2, 2, 3, 3, 10, 7, 4, 8, 3, 10, 6, 3, 3, 9, 7, 13, 4, 4, 3, 2, 0, 6, 5, 5, 10, 2, 5, 17, 1, 5, 4, 6, 0, 6, 0, 2, 11, 10, 9, 8, 3, 0, 3, 14, 8, 0, 6, 8, 0, 4, 6, 8, 1, 13, 0, 1, 8, 6, 0, 13, 5, 3, 17, 0, 5, 5, 4, 3, 8, 2, 7, 11, 5, 4, 1, 4, 4, 8, 9, 2, 10, 6, 9, 4, 6, 14, 7, 0, 0, 11, 0, 14, 5, 5, 9, 0, 6, 1, 0, 1, 7, 6, 0, 14, 1, 0, 8, 1, 5, 13, 1, 2, 1, 0, 8, 11, 0, 3, 5, 7, 14, 3, 4, 5, 11, 6, 5, 5, 9, 5, 0, 5, 7, 9, 3, 2, 2, 11, 3, 1, 8, 11, 4, 9, 2, 6, 9, 5, 4, 8, 6, 6, 9, 10, 8, 14, 7, 9, 11, 5, 6, 1, 9, 1, 13, 6, 1, 8, 2, 15, 1, 6, 12, 5, 13, 6, 6, 0, 11, 8, 7, 7, 9, 10, 2, 11, 5, 12, 11, 1, 7, 9, 1, 15, 6, 0, 4, 7, 9, 13, 2, 1, 13, 1, 9, 2, 9, 1, 4, 1, 2, 12, 0, 2, 2, 13, 0, 1, 8, 6, 3, 5, 3, 3, 2, 9, 1, 9, 9, 4, 6, 9, 4, 1, 8, 12, 11, 3, 1, 6, 5, 14, 3, 0, 4, 0, 1, 5, 1, 6, 3, 6, 5, 11, 8, 5, 10, 4, 5, 17, 1, 1, 0, 9, 6, 15, 6, 1, 3, 7, 13, 9, 9, 0, 3, 9, 1, 12]
)

# カテゴリ数
k = 4

# EMアルゴリズムの実行
pi, lambdas = em_algorithm(X, k)

print("混合係数 (pi):", pi)
print("ポアソン分布のパラメータ (lambdas):", lambdas)