#date: 2025-07-14T17:02:30Z
#url: https://api.github.com/gists/082bba38b3780997e93a1f934313246a
#owner: https://api.github.com/users/jlow3939

#!/bin/bash

# ========== CONFIGURATION ==========

LOG_FILE="/var/log/container_setup.log"                   # Log file for tracking actions
SETUP_MARKER="/var/log/.container_setup_complete"         # Marker to prevent re-running setup steps

# Paths for insecure password file simulation (audit bait)
FILE1="/home/sherlock/my_file.txt"
FILE2="/home/moriarty/my_file.txt"

# Insecure plaintext credential dump (intentionally weak)
PASSWORD_FILE_CONTENT=$'user1: "**********": qwerty!@#\nuser3: letmein456'

# Passwords assigned to real users
TOBY_PASSWORD= "**********"
ADLER_PASSWORD= "**********"

# ========== ROOT PERMISSION CHECK ==========

# Ensure script is run as root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root."
   exit 1
fi

# ========== EXECUTION CONTROL ==========

# If setup marker exists and not forced, skip user setup but allow updates
if [[ -f "$SETUP_MARKER" && "$1" != "--force" ]]; then
  echo "Setup already completed. Skipping user setup and audit file generation."
  SKIP_USER_SETUP=true
else
  SKIP_USER_SETUP=false
fi

# ========== LOGGING AND UTILITY FUNCTIONS ==========

# Log a message to both stdout and the log file
log_action() {
  echo "$(date '+%F %T') | $1" | tee -a "$LOG_FILE"
}

# Check if a user exists on the system
user_exists() {
  id "$1" &>/dev/null
}

# Add a user to the 'marketing' group, with validation
add_user_to_group() {
  local user=$1
  if user_exists "$user"; then
    usermod -aG marketing "$user"
    log_action "Added $user to 'marketing' group"
  else
    log_action "User $user does not exist. Skipping group assignment."
  fi
}

# Assign a password to a user securely via chpasswd
assign_password() {
  local user=$1
  local password= "**********"
  if user_exists "$user"; then
    echo "$user: "**********"
    log_action "Password assigned to user $user"
  else
    log_action "User $user does not exist. Skipping password assignment."
  fi
}

# Write simulated leaked password files to user directories
write_password_files() {
  echo -e "$PASSWORD_FILE_CONTENT" | tee -a "$FILE1" "$FILE2" > /dev/null
  [[ -f "$FILE1" ]] && log_action "Password file written to $FILE1" || log_action "Failed to write $FILE1"
  [[ -f "$FILE2" ]] && log_action "Password file written to $FILE2" || log_action "Failed to write $FILE2"
}

# ========== SETUP PROCESS ==========

log_action "=== Starting container setup ==="

# Always update and install packages, even on repeat runs
log_action "Updating package lists..."
apt update -y >> "$LOG_FILE" 2>&1 && log_action "Package list updated"

log_action "Installing libpam-pwquality..."
apt install -y libpam-pwquality >> "$LOG_FILE" 2>&1 && log_action "libpam-pwquality installed"

# Only run user setup and password bait if setup hasn't been completed
if [[ "$SKIP_USER_SETUP" == false ]]; then
  log_action "Assigning users to 'marketing' group..."
  add_user_to_group "toby"
  add_user_to_group "adler"

  log_action "Assigning passwords to users..."
  assign_password "toby" "$TOBY_PASSWORD"
  assign_password "adler" "$ADLER_PASSWORD"

  log_action "Creating plaintext password files for audit simulation..."
  write_password_files

  touch "$SETUP_MARKER"
  log_action "Setup marker created at $SETUP_MARKER"
else
  log_action "User setup previously completed â€” skipping user/group/password steps"
fi

log_action "=== Setup complete ==="="