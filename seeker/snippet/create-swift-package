#date: 2023-12-20T16:55:33Z
#url: https://api.github.com/gists/e20c4f0ce7c0cc7be16ce0e727f7f7d6
#owner: https://api.github.com/users/jiyimeta

#!/bin/bash

COMMANDS=("xcodegen" "swiftlint" "swiftformat" "git")
for command in "${COMMANDS[@]}"; do
    if ! which "$command" >/dev/null; then
        echo "Fatal: $command is not installed."
        exit 1
    fi
done

HELP="
Usage: create-swift-package [options]
Options:
  -r (required) repository name
  -f (required) framework name
  -c            copyright
"

while getopts r:f:c:h OPT
do
    case $OPT in
        r)
            if [ "$REPOSITORY" != "" ]; then
                echo "Use -r option only once."
                exit 1
            fi
            REPOSITORY=$OPTARG
            ;;
        f)
            if [ "$FRAMEWORK" != "" ]; then
                echo "Use -f option only once."
                exit 1
            fi
            FRAMEWORK=$OPTARG
            ;;
        c)
            if [ "$COPYRIGHT" != "" ]; then
                echo "Use -c option only once."
                exit 1
            fi
            COPYRIGHT=$OPTARG
            ;;
        h)  echo "$HELP"
            exit 0
            ;;
        *) echo "$HELP"
            exit 1
            ;;
    esac
done

if [ "$REPOSITORY" = "" ]; then
    echo "Repository name is required. Use -r option."
    exit 1
fi

if [ "$FRAMEWORK" = "" ]; then
    echo "Option -f is required. Use -f option."
    exit 1
fi


mkdir "$REPOSITORY"
cd "$REPOSITORY" || exit 1

# =======================

GIT_IGNORE_CONTENT=".DS_Store
/.build
/Packages
*.xcodeproj
xcuserdata/
DerivedData/
.swiftpm/config/registries.json
.swiftpm/xcode/package.xcworkspace/contents.xcworkspacedata
.netrc
"
echo "$GIT_IGNORE_CONTENT" >> .gitignore

# =======================

SWIFT_FORMAT_CONTENT="--allman false
--disable andOperator
--disable unusedArguments
--lineaftermarks false
--swiftversion 5.9
--wraparguments before-first
--wrapcollections before-first
--wrapparameters before-first
--xcodeindentation enabled
"
echo "$SWIFT_FORMAT_CONTENT" >> .swiftformat

# =======================

SWIFT_LINT_CONTENT="disabled_rules:
  # - block_based_kvo
  # - class_delegate_protocol
  # - closing_brace
  # - closure_parameter_position
  # - colon
  # - comma
  # - compiler_protocol_init
  # - control_statement
  # - custom_rules
  - cyclomatic_complexity
  # - deployment_target
  # - discarded_notification_center_observer
  # - discouraged_direct_init
  # - duplicate_imports
  # - dynamic_inline
  # - empty_enum_arguments
  # - empty_parameters
  # - empty_parentheses_with_trailing_closure
  # - file_length
  # - for_where
  # - force_cast
  # - force_try
  - function_body_length
  - function_parameter_count
  # - generic_type_name
  # - identifier_name
  # - implicit_getter
  # - inert_defer
  # - is_disjoint
  # - large_tuple
  # - leading_whitespace
  # - legacy_cggeometry_functions
  # - legacy_constant
  # - legacy_constructor
  # - legacy_hashing
  # - legacy_nsgeometry_functions
  # - line_length
  # - mark
  - multiple_closures_with_trailing_closure
  - nesting
  # - no_fallthrough_only
  # - notification_center_detachment
  - opening_brace
  # - operator_whitespace
  # - private_over_fileprivate
  # - private_unit_test
  # - protocol_property_accessors_order
  # - redundant_discardable_let
  # - redundant_objc_attribute
  # - redundant_optional_initialization
  # - redundant_set_access_control
  # - redundant_string_enum_value
  # - redundant_void_return
  # - return_arrow_whitespace
  # - shorthand_operator
  # - statement_position
  - superfluous_disable_command
  # - switch_case_alignment
  # - syntactic_sugar
  # - todo
  - trailing_comma
  # - trailing_newline
  # - trailing_semicolon
  - trailing_whitespace
  # - type_body_length
  # - type_name
  # - unneeded_break_in_switch
  # - unused_closure_parameter
  # - unused_control_flow_label
  # - unused_enumerated
  # - unused_optional_binding
  # - unused_setter_value
  # - valid_ibinspectable
  # - vertical_parameter_alignment
  - vertical_whitespace
  # - void_return
  # - weak_computed_property
  # - weak_delegate
  # - xctfail_message

# デフォルト無効で有効にするルール
opt_in_rules:
  - array_init
  # - attributes
  # - closure_body_length
  - closure_end_indentation
  - closure_spacing
  - collection_alignment
  # - conditional_returns_on_newline
  - contains_over_first_not_nil
  - convenience_type
  # - discouraged_object_literal
  # - discouraged_optional_boolean
  # - discouraged_optional_collection
  - empty_count
  - empty_string
  # - empty_xctest_method
  # - explicit_acl
  # - explicit_enum_raw_value
  - explicit_init
  # - explicit_self
  # - explicit_top_level_acl
  # - explicit_type_interface
  # - extension_access_modifier
  - fallthrough
  - fatal_error_message
  # - file_header
  # - file_name
  - first_where
  - force_unwrapping
  # - function_default_parameter_at_end
  - identical_operands
  - implicit_return
  - implicitly_unwrapped_optional
  - joined_default_parameter
  - last_where
  - legacy_random
  # - let_var_whitespace
  - literal_expression_end_indentation
  - lower_acl_than_parent
  - missing_docs
  - modifier_order
  # - multiline_arguments
  # - multiline_arguments_brackets
  # - multiline_function_chains
  # - multiline_literal_brackets
  # - multiline_parameters
  # - multiline_parameters_brackets
  - nimble_operator
  - no_extension_access_modifier
  # - no_grouping_extension
  - nslocalizedstring_key
  # - number_separator
  # - object_literal
  - operator_usage_whitespace
  - overridden_super_call
  # - override_in_extension
  - pattern_matching_keywords
  # - prefixed_toplevel_constant
  - private_action
  - private_outlet
  # - prohibited_interface_builder
  - prohibited_super_call
  - quick_discouraged_call
  - quick_discouraged_focused_test
  - quick_discouraged_pending_test
  - redundant_nil_coalescing
  - redundant_type_annotation
  # - required_deinit
  - required_enum_case
  - single_test_class
  - sorted_first_last
  - sorted_imports
  - static_operator
  # - strict_fileprivate
  # - strong_iboutlet
  # - switch_case_on_newline
  - toggle_bool
  # - trailing_closure
  - unavailable_function
  - unneeded_parentheses_in_closure_argument
  - untyped_error_in_catch
  - vertical_parameter_alignment_on_call
  # - vertical_whitespace_between_cases
  - vertical_whitespace_closing_braces
  - vertical_whitespace_opening_braces
  - xct_specific_matcher
  - yoda_condition

analyzer_rules:
  - unused_declaration
  - unused_import

included: []

excluded:
  - Pods
  - Carthage
  - SourcePackages
  - Generated

line_length:
  warning: 120

file_length:
  warning: 300

type_body_length:
  warning: 300

type_name:
  min_length: 1

identifier_name:
  min_length: 1

large_tuple:
  warning: 4
"
echo "$SWIFT_LINT_CONTENT" >> .swiftlint.yml

# =======================

if [ "$COPYRIGHT" != "" ]; then
    LICENSE="MIT License

Copyright (c) $COPYRIGHT.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"
    
    echo "$LICENSE" >> LICENSE
fi

# =======================

README="# $REPOSITORY

## License
This library is released under the MIT license. See [LICENSE](LICENSE) for details.
"
echo "$README" >> README.md

# =======================

PACKAGE="// swift-tools-version: 5.9
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: \"$REPOSITORY\",
    platforms: [
        .iOS(.v13),
        .macOS(.v10_15),
        .tvOS(.v13),
        .watchOS(.v6),
    ],
    products: [
        .library(
            name: \"$FRAMEWORK\",
            targets: [\"$FRAMEWORK\"]
        ),
    ],
    dependencies: [],
    targets: [
        .target(
            name: \"$FRAMEWORK\"
        ),
        .testTarget(
            name: \"${FRAMEWORK}Tests\",
            dependencies: [
                \"$FRAMEWORK\",
            ]
        ),
    ]
)
"
echo "$PACKAGE" >> Package.swift

# =======================

SOURCE_CONTENT="import Foundation
"
mkdir Sources
echo "$SOURCE_CONTENT" >> "Sources/$FRAMEWORK.swift"

# =======================

TEST_CONTENT="import XCTest
@testable import ${FRAMEWORK}

final class ${FRAMEWORK}Tests: XCTestCase {
    
}
"
TEST_DIR="Tests/${FRAMEWORK}Tests"
mkdir -p "$TEST_DIR"
echo "$TEST_CONTENT" >> "$TEST_DIR/${FRAMEWORK}Tests.swift"

# =======================

EXAMPLE_PROJECT="name: ${FRAMEWORK}Example

options:
  developmentLanguage: en
  deploymentTarget:
    iOS: 15.0

packages:
  ${FRAMEWORK}:
    path: ../

targets:
  ${FRAMEWORK}Example:
    type: application
    platform: iOS
    settings:
      INFOPLIST_FILE: Info.plist
      TARGETED_DEVICE_FAMILY: 1
      PRODUCT_BUNDLE_IDENTIFIER: com.dev.${FRAMEWORK}Example
      MARKETING_VERSION: 1.0
      CURRENT_PROJECT_VERSION: 1
    sources:
      - ${FRAMEWORK}Example
    dependencies:
      - package: ${FRAMEWORK}
"
mkdir Example
echo "$EXAMPLE_PROJECT" >> Example/project.yml


# =======================

INFO_PLIST_CONTENT="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>\$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleDisplayName</key>
	<string>\$(DISPLAY_NAME)</string>
	<key>CFBundleExecutable</key>
	<string>\$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>\$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>\$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>\$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
	<key>CFBundleShortVersionString</key>
	<string>\$(MARKETING_VERSION)</string>
	<key>CFBundleVersion</key>
	<string>\$(CURRENT_PROJECT_VERSION)</string>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
</dict>
</plist>
"
ECHO "$INFO_PLIST_CONTENT" >> "Example/Info.plist"

# =======================

CONTENT_VIEW="import SwiftUI
import $FRAMEWORK

struct ContentView: View {
    var body: some View {
        VStack {
            Text(\"Hello, world!\")
        }
    }
}

#Preview {
    ContentView()
}
"
FRAMEWORK_APP="import SwiftUI

@main
struct ${FRAMEWORK}ExampleApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
"
EXAMPLE_APP_DIR="Example/${FRAMEWORK}Example/"
mkdir -p "$EXAMPLE_APP_DIR"
echo "$CONTENT_VIEW" >> "$EXAMPLE_APP_DIR/ContentView.swift"
echo "$FRAMEWORK_APP" >> "$EXAMPLE_APP_DIR/${FRAMEWORK}ExampleApp.swift"

# =======================

PREVIEW_ASSETS="{
  \"info\" : {
    \"author\" : \"xcode\",
    \"version\" : 1
  }
}
"
PREVIEW_ASSETS_DIR="Example/${FRAMEWORK}Example/Preview Content/Preview Assets.xcassets"
mkdir -p "$PREVIEW_ASSETS_DIR"
echo "$PREVIEW_ASSETS" >> "$PREVIEW_ASSETS_DIR/Contents.json"

# =======================

ASSETS="{
  \"info\" : {
    \"author\" : \"xcode\",
    \"version\" : 1
  }
}
"
ASSETS_DIR="Example/${FRAMEWORK}Example/Assets.xcassets"
mkdir -p "$ASSETS_DIR"
echo "$ASSETS" >> "$ASSETS_DIR/Contents.json"

# =======================

ACCENT_COLOR="{
  \"colors\" : [
    {
      \"idiom\" : \"universal\"
    }
  ],
  \"info\" : {
    \"author\" : \"xcode\",
    \"version\" : 1
  }
}
"
ACCENT_COLOR_DIR="Example/${FRAMEWORK}Example/Assets.xcassets/AccentColor.colorset"
mkdir -p "$ACCENT_COLOR_DIR"
echo "$ACCENT_COLOR" >> "$ACCENT_COLOR_DIR/Contents.json"

# =======================

APP_ICON="{
  \"images\" : [
    {
      \"idiom\" : \"universal\",
      \"platform\" : \"ios\",
      \"size\" : \"1024x1024\"
    }
  ],
  \"info\" : {
    \"author\" : \"xcode\",
    \"version\" : 1
  }
}
"
APP_ICON_DIR="Example/${FRAMEWORK}Example/Assets.xcassets/AppIcon.appiconset"
mkdir -p "$APP_ICON_DIR"
echo "$APP_ICON" >> "$APP_ICON_DIR/Contents.json"

# =======================

swiftlint --fix --format .
swiftformat .

git init
git add .
git commit -m "Initial commit"

GIT_PRE_COMMIT_CONTENT="#!/bin/bash -e

FILENAMES=\"\"

while read -r filename; do
    FILENAMES=\"\$FILENAMES \$filename\"
done < <(git diff --diff-filter=d --name-only -- \"*.swift\")

while read -r filename; do
    FILENAMES=\"\$FILENAMES \$filename\"
done < <(git diff --cached --diff-filter=d --name-only -- \"*.swift\")

while read -r filename; do
    FILENAMES=\"\$FILENAMES \$filename\"
done < <(git ls-files --others --exclude-standard -- \"*.swift\")

swiftlint --fix --format \$FILENAMES
printf \"\n\"
swiftformat \$FILENAMES
printf \"\n\"
swiftlint --strict \$FILENAMES
"
echo "$GIT_PRE_COMMIT_CONTENT" >> ".git/hooks/pre-commit"
chmod +x ".git/hooks/pre-commit"

cd Example || exit 1
xcodegen
open "${FRAMEWORK}Example.xcodeproj"
