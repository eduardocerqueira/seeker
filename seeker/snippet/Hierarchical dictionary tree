#date: 2022-06-16T17:01:31Z
#url: https://api.github.com/gists/16bcc4ee346f6d389dd0dfe382de7ae3
#owner: https://api.github.com/users/hjltu

#!/usr/bin/env python3

"""
Test Python

Write a function that builds a tree based on a list of tuples of id (parent id, offspring id),
where None is the id of the root node.
How this should work:
"""


source = [
    (None, 'a'),
    (None, 'b'),
    (None, 'c'),
    ('a', 'a1'),
    ('a', 'a2'),
    ('a2', 'a21'),
    ('a2', 'a22'),
    ('b', 'b1'),
    ('b1', 'b11'),
    ('b11', 'b111'),
    ('b', 'b2'),
    ('c', 'c1'),
]

expected = {
    'a': {'a1': {}, 'a2': {'a21': {}, 'a22': {}}},
    'b': {'b1': {'b11': {'b111': {}}}, 'b2': {}},
    'c': {'c1': {}},
}


def _to_dict(parent, roots):
    children = (r[1] for r in roots if r[0] == parent)
    return {c: _to_dict(c, roots) for c in children}


def to_tree(source):
    parents, children = map(set, zip(*[s for s in source if s[0] is not None]))
    return {r: _to_dict(r, source) for r in (parents - children)}


assert to_tree(source) == expected