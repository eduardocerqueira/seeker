#date: 2022-09-29T17:21:37Z
#url: https://api.github.com/gists/8c36cc609a3eb0525495ae0508ec7031
#owner: https://api.github.com/users/maodevops

#!/usr/bin/env bash
#
# .envrc for direnv
# See https://direnv.net/
#
# Drop this file in any directory to automatically create python virtual env
# the first time you run 'direnv allow' in the directory.
#
# After that your virtual env will be loaded automatically when you enter the
# directory and unloaded when you exit the directory.
#
# If you have a requirements-dev.txt file it will be used to install pip packages
# when the venv is first created.  If a requirements-dev.txt file doesn't exist
# the script then looks for a requirements.txt file and uses that to install
# pip packages.
#
# If you have a .pre-commit-config.yaml in the directory, then pre-commit will
# be installed if it's not already installed and then the 'pre-commit install'
# will be installed to install the pre-commit hooks.
#

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

MY_PYTHON_VIRTUAL_ENV_DIR="${MY_PYTHON_VIRTUAL_ENV_DIR:-${HOME}/.virtualenvs}"
MY_PROJECT_DIR="${MY_PROJECT_DIR:-${SCRIPT_DIR}}"
MY_VENV_DIR="${MY_VENV_DIR:-${MY_PYTHON_VIRTUAL_ENV_DIR}${MY_PROJECT_DIR}/venv}"

# BEGIN: Logging vars and functions --------------------------------------------
declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1  [WARN]=2   [ERROR]=3 [FATAL]=4 [OFF]=5)
declare -A LOG_COLORS=([DEBUG]=2 [INFO]=12 [WARN]=148 [ERROR]=9 [FATAL]=9 [OFF]=0)
LOG_LEVEL="INFO"

log.log() {
  local msg="$1"
  local lvl=${2:-INFO}
  if [[ ${LOG_LEVELS[$LOG_LEVEL]} -le ${LOG_LEVELS[$lvl]} ]]; then
    if [[ -t 1 ]]; then tput setaf ${LOG_COLORS[$lvl]}; fi
    printf "[%-5s] " "$lvl" 1>&2
    echo 1>&2 -e "${msg}" 1>&2
    if [[ -t 1 ]]; then tput sgr0; fi
  fi
}

log.debug() { log.log "${1:-}" "DEBUG" ; }
log.info()  { log.log "${1:-}" "INFO"  ; }
log.warn()  { log.log "${1:-}" "WARN"  ; }
log.error() { log.log "${1:-}" "ERROR" ; }
log.fatal() { log.log "${1:-}" "FATAL" ; }
# END: Logging vars and functions ----------------------------------------------

log.debug "SCRIPT_DIR=$SCRIPT_DIR"
log.debug "MY_PYTHON_VIRTUAL_ENV_DIR=${MY_PYTHON_VIRTUAL_ENV_DIR}"
log.debug "MY_VENV_DIR=${MY_VENV_DIR}"

create_venv() {

  mkdir -p "${MY_VENV_DIR}"
  python3 -m venv "${MY_VENV_DIR}"

  if [[ -d "${MY_VENV_DIR}" ]]; then
    log.info "Activating virtual env '${MY_VENV_DIR}'"
    source "${MY_VENV_DIR}/bin/activate"
    pip install --upgrade pip
    if [[ -f "${MY_PROJECT_DIR}/requirements-dev.txt" ]]; then
      log.info "Found requirements-dev.txt. Installing pip packages..."
      pip install -r requirements-dev.txt
    elif [[ -f "${MY_PROJECT_DIR}/requirements.txt" ]]; then
      log.info "Found requirements.txt. Installing pip packages..."
      pip install -r requirements.txt
    fi

    if [[ -d "${MY_PROJECT_DIR}/.git" ]]; then
      if [[ -f .pre-commit-config.yaml ]]; then
        if ! [ -x "$(command -v pre-commit)" ]; then
          log.error 'ERROR: .pre-commit-config.yaml exists but pre-commit is not installed.'
          exit 1
        else
          log.info "Found a .pre-commit-config.yaml file. Installing pre-commit hooks"
          pre-commit install
          # pre-commit autoupdate
        fi
      fi
    fi
  fi
}

check_venv() {
  if [[ ! -d "${MY_VENV_DIR}" ]]; then
    log.info "venv for '${MY_PROJECT_DIR}' doesn't exist. Creating it..."
    create_venv
  else
    log.info "Activating virtual env '${MY_VENV_DIR}'"
    source "${MY_VENV_DIR}/bin/activate"
  fi
}

main() {
  check_venv
}

main
