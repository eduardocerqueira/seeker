#date: 2025-10-07T17:11:46Z
#url: https://api.github.com/gists/27f8489ddd5b08ed5972be02a8d89a97
#owner: https://api.github.com/users/DHGerstenfield

'''
Name: Devon Gerstenfield
Date: 10/7/25
Course Number: CSC-220-D01
Course Name: Data Structures/Algorithms
Problem Number: 4
Email: dgerstenfield2401@student.stcc.edu
Problem Description: Write a program that prompts the user for three lengths, generates a
                     triangle, and returns information about said triangle.
'''

'''
I certify that this code is my own work and was not generated by AI or copied from
any unauthorized source.  I understand that while AI tools like ChatGPT may assist
with learning, the code I submit must reflect my personal understanding.
Relying on external sources without comprehension undermines my learning and
may result in a lower grade. If there are concerns about my submission, I am willing
to meet during lab within two weeks of grading to demonstrate my understanding.
'''

#
# DO NOT REMOVE THE COMMENTS MADE IN THIS TEMPLATE!
#

# **********************************************
# imports here
import math

# **********************************************
# Define constants or variables here
TITLE = "Devon's Magical Triangle Generator!!!"
CONTINUE_PROMPT = "Do this again? [y/N] "


# **********************************************
# Define classes and functions here
class Triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def is_valid(self):
        """Check if the sides form a valid triangle."""
        return (
            self.a + self.b > self.c and
            self.a + self.c > self.b and
            self.b + self.c > self.a
        )

    def area(self):
        """Compute the area using Heron's formula."""
        if not self.is_valid():
            raise ValueError("The given sides do not form a valid triangle.")
        s = (self.a + self.b + self.c) / 2
        return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))

    def angles(self):
        """Compute the angles using the Law of Cosines."""
        if not self.is_valid():
            raise ValueError("The given sides do not form a valid triangle.")

        def safe_acos(x):
            """Prevent math domain errors by clamping values into [-1, 1]."""
            return math.acos(max(-1, min(1, x)))

        angle_a = safe_acos((self.b**2 + self.c**2 - self.a**2) / (2 * self.b * self.c))
        angle_b = safe_acos((self.a**2 + self.c**2 - self.b**2) / (2 * self.a * self.c))
        angle_c = safe_acos((self.a**2 + self.b**2 - self.c**2) / (2 * self.a * self.b))
        return [angle_a, angle_b, angle_c]

    def triangle_type(self):
        """Check if the triangle is equilateral, isosceles, or scalene."""
        if not self.is_valid():
            return "Invalid"
        if self.a == self.b == self.c:
            return "Equilateral"
        elif self.a == self.b or self.b == self.c or self.a == self.c:
            return "Isosceles"
        else:
            return "Scalene"

    def angle_checks(self):
        """Check whether the triangle is right, obtuse, or acute."""
        if not self.is_valid():
            return "Invalid"

        # Sort sides so c is the longest
        sides = sorted([self.a, self.b, self.c])
        a, b, c = sides
        lhs = c ** 2
        rhs = a ** 2 + b ** 2

        if math.isclose(lhs, rhs, rel_tol=1e-9):
            return "Right"
        elif lhs < rhs:
            return "Acute"
        else:
            return "Obtuse"


def get_positive_float(prompt):
    """Prompt the user for a positive numeric value."""
    while True:
        try:
            value = float(input(prompt))
            if value <= 0:
                print("Side lengths must be positive. Try again.")
            else:
                return value
        except ValueError:
            print("Invalid input. Please enter a numeric value.")


# **********************************************
# Start your logic coding in the process function
def process():
    # Get input from the user
    a = get_positive_float("Enter length of side a: ")
    b = get_positive_float("Enter length of side b: ")
    c = get_positive_float("Enter length of side c: ")

    # Create Triangle object
    triangle = Triangle(a, b, c)

    if triangle.is_valid():
        print(f"\nThe area of the triangle is {triangle.area():.2f}")
        print(f"The triangle is {triangle.angle_checks()}")
        print(f"The type of triangle is {triangle.triangle_type()}")
        angles = triangle.angles()
        angles_deg = [math.degrees(angle) for angle in angles]
        print("Angles (degrees):", ", ".join(f"{deg:.2f}Â°" for deg in angles_deg))
    else:
        print("\nThe given lengths do not form a valid triangle.")


# **********************************************
# Do not change the do_this_again function
def do_this_again(prompt):
    do_over = input(prompt)
    return do_over.strip().lower() == 'y'


# **********************************************
# Do not change the main function
def main():
    print(f"Welcome to {TITLE}\n")
    while True:
        process()
        print()  # blank line for spacing
        if not do_this_again(CONTINUE_PROMPT):
            break
    print(f"\nThank you for using {TITLE}")


if __name__ == "__main__":
    main()