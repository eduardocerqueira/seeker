#date: 2025-10-28T17:10:24Z
#url: https://api.github.com/gists/a774170a69cb481f24168bb3439a3022
#owner: https://api.github.com/users/mix0073

import threading
import time
from typing import List, Dict
from sqlalchemy import select
import math
import numpy as np
from math import cos, sin, radians

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
cube_updates_batch = []
harvest_batch = []
batch_lock = threading.Lock()


def calculate_active_faces(cube_position_id: int, rotation_x: float, rotation_y: float, rotation_z: float):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ –≥—Ä–∞–Ω–∏ –∫—É–±–∏–∫–∞ —Å–º–æ—Ç—Ä—è—Ç –Ω–∞—Ä—É–∂—É
    –° –£–ß–ï–¢–û–ú –¢–ï–ö–£–©–ï–ô –ü–û–ó–ò–¶–ò–ò –ü–û–°–õ–ï –í–†–ê–©–ï–ù–ò–Ø
    """
    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ ID
    initial_x = (cube_position_id // 100) - 1
    initial_y = ((cube_position_id % 100) // 10) - 1
    initial_z = (cube_position_id % 10) - 1

    # –í–´–ß–ò–°–õ–Ø–ï–ú –¢–ï–ö–£–©–£–Æ –ü–û–ó–ò–¶–ò–Æ –ø–æ—Å–ª–µ –≤—Ä–∞—â–µ–Ω–∏—è
    current_x, current_y, current_z = calculate_current_position(
        initial_x, initial_y, initial_z, rotation_x, rotation_y, rotation_z
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–≥–ª—ã –≠–π–ª–µ—Ä–∞ –≤ —Ä–∞–¥–∏–∞–Ω—ã
    rx = math.radians(rotation_x)
    ry = math.radians(rotation_y)
    rz = math.radians(rotation_z)

    # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä–∞–Ω–∏ –∫—É–±–∏–∫–∞ (–≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö)
    face_normals = {
        'front': (0, 0, 1),
        'back': (0, 0, -1),
        'left': (-1, 0, 0),
        'right': (1, 0, 0),
        'top': (0, 1, 0),
        'bottom': (0, -1, 0)
    }

    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤—Ä–∞—â–µ–Ω–∏—é –∫—É–±–∏–∫–∞
    active_faces = []

    for face_name, normal in face_normals.items():
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä –Ω–æ—Ä–º–∞–ª–∏
        rotated_normal = rotate_vector(normal, rx, ry, rz)

        # ‚úÖ –ü–ï–†–ï–î–ê–ï–ú –¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò –í is_face_outward
        if is_face_outward(current_x, current_y, current_z, rotated_normal):
            active_faces.append(face_name)

    return active_faces


def rotate_vector(vector, rx, ry, rz):
    """–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä –Ω–∞ —É–≥–ª—ã –≠–π–ª–µ—Ä–∞"""
    x, y, z = vector

    # –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ X
    y1 = y * math.cos(rx) - z * math.sin(rx)
    z1 = y * math.sin(rx) + z * math.cos(rx)

    # –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ Y
    x2 = x * math.cos(ry) + z1 * math.sin(ry)
    z2 = -x * math.sin(ry) + z1 * math.cos(ry)

    # –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ Z
    x3 = x2 * math.cos(rz) - y1 * math.sin(rz)
    y3 = x2 * math.sin(rz) + y1 * math.cos(rz)

    return (x3, y3, z2)

def is_face_outward(current_x: int, current_y: int, current_z: int, normal):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–º–æ—Ç—Ä–∏—Ç –ª–∏ –≥—Ä–∞–Ω—å –Ω–∞—Ä—É–∂—É –±–æ–ª—å—à–æ–≥–æ –∫—É–±–∞
    –ò–°–ü–û–õ–¨–ó–£–ï–¢ –¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò –∫—É–±–∞ –ø–æ—Å–ª–µ –≤—Ä–∞—â–µ–Ω–∏—è
    """
    nx, ny, nz = normal

    # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò –≤–º–µ—Å—Ç–æ cube_position_id!
    if nx > 0.7 and current_x == 1: return True  # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω—å –Ω–∞ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if nx < -0.7 and current_x == -1: return True  # –õ–µ–≤–∞—è –≥—Ä–∞–Ω—å –Ω–∞ –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if ny > 0.7 and current_y == 1: return True  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if ny < -0.7 and current_y == -1: return True  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å –Ω–∞ –Ω–∏–∂–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if nz > 0.7 and current_z == 1: return True  # –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if nz < -0.7 and current_z == -1: return True  # –ó–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å –Ω–∞ –∑–∞–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω–µ

    return False


def determine_default_element(cube_position_id: int, face_direction: str) -> int:
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä–∞–Ω—è–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ - –≠–õ–ï–ú–ï–ù–¢–´ –ü–†–ò–í–Ø–ó–ê–ù–´ –ö –ì–†–ê–ù–Ø–ú –ù–ê–í–°–ï–ì–î–ê"""
    import hashlib

    # ‚úÖ –°–û–ó–î–ê–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ô –•–≠–® –î–õ–Ø –ö–ê–ñ–î–û–ô –ì–†–ê–ù–ò
    # –≠–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –ü–†–ò–ö–†–ï–ü–õ–ï–ù –∫ —ç—Ç–æ–π –≥—Ä–∞–Ω–∏ –Ω–∞–≤—Å–µ–≥–¥–∞
    seed_string = f"{cube_position_id}_{face_direction}"
    seed_value = int(hashlib.md5(seed_string.encode()).hexdigest()[:8], 16)

    # ‚úÖ –†–ê–°–ü–†–ï–î–ï–õ–Ø–ï–ú 118 –≠–õ–ï–ú–ï–ù–¢–û–í –ü–û 156 –ì–†–ê–ù–Ø–ú
    # –ö–∞–∂–¥–∞—è –≥—Ä–∞–Ω—å –ø–æ–ª—É—á–∞–µ—Ç –ü–û–°–¢–û–Ø–ù–ù–´–ô —ç–ª–µ–º–µ–Ω—Ç
    element_id = (seed_value % 118) + 1

    return element_id


def calculate_harvest(player_id: int):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–±—ã—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–Ω–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ù–ê –ì–†–ê–ù–ò CubeState"""
    try:
        from database import SyncSessionLocal
        from models import CubeState

        with SyncSessionLocal() as db:
            # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –í–°–ï –ö–£–ë–´ –ò–ì–†–û–ö–ê –° –ê–ö–¢–ò–í–ù–´–ú–ò –ì–†–ê–ù–Ø–ú–ò
            all_cubes = db.execute(
                select(CubeState).where(CubeState.player_id == player_id)
            ).scalars().all()

            print(f"üîç Player {player_id}: {len(all_cubes)} cubes total")

            active_faces_count = 0

            for cube in all_cubes:
                # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ö–ê–ñ–î–£–Æ –ì–†–ê–ù–¨ –ö–£–ë–ê
                faces_to_process = [
                    ('front', cube.front_element_id, cube.front_is_active, 'front_current_amount'),
                    ('back', cube.back_element_id, cube.back_is_active, 'back_current_amount'),
                    ('left', cube.left_element_id, cube.left_is_active, 'left_current_amount'),
                    ('right', cube.right_element_id, cube.right_is_active, 'right_current_amount'),
                    ('top', cube.top_element_id, cube.top_is_active, 'top_current_amount'),
                    ('bottom', cube.bottom_element_id, cube.bottom_is_active, 'bottom_current_amount'),
                ]

                for face_name, element_id, is_active, amount_field in faces_to_process:
                    if is_active and element_id:
                        active_faces_count += 1
                        production_rate = get_element_production_rate(element_id)

                        # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ê –ì–†–ê–ù–ò
                        current_amount = getattr(cube, amount_field) or 0
                        storage_capacity = get_max_storage(element_id, 1)
                        new_amount = min(current_amount + production_rate, storage_capacity)
                        setattr(cube, amount_field, new_amount)

                        print(
                            f"üîç Cube {cube.cube_position_id}-{face_name}: producing {production_rate}, new amount: {new_amount}")

            db.commit()

            if active_faces_count > 0:
                print(f"‚úÖ Produced resources on {active_faces_count} active faces for player {player_id}")
            else:
                print(f"‚è≥ No active faces for player {player_id}")

    except Exception as e:
        print(f"‚ùå Error calculating harvest: {e}")

def get_element_production_rate(element_id: int) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –ë–î"""
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ë–î
    rates = {
        1: 0.15,  # Hydrogen
        2: 0.12,  # Helium
        3: 0.18,  # Lithium
    }
    return rates.get(element_id, 0.1)

def get_max_storage(element_id: int, storage_level: int) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"""
    base_capacity = {
        1: 120,  # Hydrogen
        2: 100,  # Helium
        3: 150,  # Lithium
    }
    return base_capacity.get(element_id, 100) * storage_level

async def collect_resources_from_face(db, player_id: int, cube_position_id: int, face_direction: str):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä–∞–Ω–∏ –Ω–∞ —Å–∫–ª–∞–¥ –∏–≥—Ä–æ–∫–∞"""
    from models import CubeFace, PlayerInventory

    # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω—å
    face_result = await db.execute(
        select(CubeFace)
        .where(
            CubeFace.player_id == player_id,
            CubeFace.cube_position_id == cube_position_id,
            CubeFace.face_direction == face_direction
        )
    )
    face = face_result.scalar_one_or_none()

    # –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –ü–û–õ–Ø
    current_amount = getattr(face, 'current_amount', 0) or 0

    if face and face.element_id and current_amount > 0:
        collected_amount = current_amount

        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        inventory_result = await db.execute(
            select(PlayerInventory)
            .where(
                PlayerInventory.player_id == player_id,
                PlayerInventory.element_id == face.element_id
            )
        )
        inventory = inventory_result.scalar_one_or_none()

        if inventory:
            inventory.amount += collected_amount
        else:
            inventory = PlayerInventory(
                player_id=player_id,
                element_id=face.element_id,
                amount=collected_amount
            )
            db.add(inventory)

        # –û–±–Ω—É–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ –≥—Ä–∞–Ω–∏
        face.current_amount = 0  # –ò–°–ü–†–ê–í–õ–ï–ù–û
        await db.commit()

        return collected_amount
    return 0
async def produce_resources_for_player(db, player_id: int):
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–Ω—è—Ö –∏–≥—Ä–æ–∫–∞"""
    from models import CubeFace

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏ –∏–≥—Ä–æ–∫–∞
    faces_result = await db.execute(
        select(CubeFace)
        .where(
            CubeFace.player_id == player_id,
            CubeFace.is_active == True,
            CubeFace.element_id.isnot(None)
        )
    )
    active_faces = faces_result.scalars().all()

    for face in active_faces:
        production_rate = get_element_production_rate(face.element_id)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –≥—Ä–∞–Ω–∏
        if face.stored_amount is None:
            face.stored_amount = 0

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞–Ω–∏
        storage_capacity = get_max_storage(face.element_id, 1)  # –ü–æ–∫–∞ —É—Ä–æ–≤–µ–Ω—å 1

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
        new_amount = min(face.stored_amount + production_rate, storage_capacity)
        face.stored_amount = new_amount

    await db.commit()

def process_batches_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"""
    from database import SyncSessionLocal

    with batch_lock:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–±–∏–∫–æ–≤
        if cube_updates_batch:
            batch = cube_updates_batch.copy()
            cube_updates_batch.clear()
            process_cube_batch_sync(batch)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (–∞–≤—Ç–æ-–¥–æ–±—ã—á–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤)
        calculate_harvest_for_all_players()

def calculate_harvest_for_all_players():
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    try:
        from database import SyncSessionLocal
        from models import Player

        with SyncSessionLocal() as db:
            players = db.execute(select(Player)).scalars().all()

            for player in players:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–Ω—è—Ö
                calculate_harvest(player.id)

            print(f"‚úÖ –ê–≤—Ç–æ-–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {len(players)} –∏–≥—Ä–æ–∫–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {e}")

def start_background_processor():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤"""

    def processor():
        while True:
            time.sleep(10)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            process_batches_sync()

    thread = threading.Thread(target=processor, daemon=True)
    thread.start()
    print("‚úÖ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω (—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–Ω–µ–π)")


def calculate_current_position(initial_x, initial_y, initial_z, rotation_x, rotation_y, rotation_z):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É–±–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –≤—Ä–∞—â–µ–Ω–∏–π
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–≥–ª—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
    rx = math.radians(rotation_x)
    ry = math.radians(rotation_y)
    rz = math.radians(rotation_z)

    # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–∞–∫ –≤–µ–∫—Ç–æ—Ä
    initial_pos = np.array([initial_x, initial_y, initial_z])

    # –ú–∞—Ç—Ä–∏—Ü—ã –≤—Ä–∞—â–µ–Ω–∏—è
    Rx = np.array([
        [1, 0, 0],
        [0, math.cos(rx), -math.sin(rx)],
        [0, math.sin(rx), math.cos(rx)]
    ])

    Ry = np.array([
        [math.cos(ry), 0, math.sin(ry)],
        [0, 1, 0],
        [-math.sin(ry), 0, math.cos(ry)]
    ])

    Rz = np.array([
        [math.cos(rz), -math.sin(rz), 0],
        [math.sin(rz), math.cos(rz), 0],
        [0, 0, 1]
    ])

    # –û–±—â–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –≤—Ä–∞—â–µ–Ω–∏—è
    R = Rz @ Ry @ Rx

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏
    current_pos = R @ initial_pos

    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö (–∫—É–±—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ —É–∑–ª–∞—Ö —Å–µ—Ç–∫–∏)
    return (
        round(current_pos[0]),
        round(current_pos[1]),
        round(current_pos[2])
    )