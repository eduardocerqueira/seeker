#date: 2025-08-08T16:59:57Z
#url: https://api.github.com/gists/b6febed86e8a3b41cd8361ef45dcc6ae
#owner: https://api.github.com/users/finnbainbridge

#!/bin/bash

# git-flip: A custom git command to stash uncommitted changes on the current branch
# and automatically apply them when flipping back.
#
# Usage: git flip <branch_name>
#
# This script performs the following actions:
# 1. Checks if a branch name is provided.
# 2. Determines the current Git branch.
# 3. If there are uncommitted changes on the current branch, it stashes them
#    and stores a reference to this stash in the Git configuration for that branch.
# 4. Checks out the target branch.
# 5. If the target branch has a stored stash reference from a previous 'git flip',
#    it attempts to apply that stash.
# 6. If the stash is applied successfully, it drops the stash and clears the
#    stored reference for the target branch.
#
# Error Handling:
# - Exits immediately if a critical Git command fails.
# - Provides informative messages for success, warnings, and errors.
# - Handles cases where there are no changes to stash or no stash to apply.

# set -e # Exit immediately if a command exits with a non-zero status.

TARGET_BRANCH="$1"

# --- Helper function for displaying status messages ---
function echo_status() {
    echo -e "\033[1;34m[git-flip]\033[0m $1"
}

# --- Helper function for displaying error messages ---
function echo_error() {
    echo -e "\033[1;31m[git-flip ERROR]\033[0m $1" >&2
}

# --- Display usage if no target branch is provided ---
if [ -z "$TARGET_BRANCH" ]; then
    echo "Usage: git flip <branch_name>"
    echo ""
    echo "Switches to the specified branch. If there are uncommitted changes on the current"
    echo "branch, they are stashed and associated with that branch. When flipping back"
    echo "to a branch that previously had changes stashed by 'git flip', those changes"
    echo "are automatically applied."
    exit 1
fi

# --- Get the current branch name ---
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$?" -ne 0 ]; then
    echo_error "Not in a Git repository or cannot determine current branch."
    exit 1
fi

# --- Check if already on the target branch ---
if [ "$CURRENT_BRANCH" == "$TARGET_BRANCH" ]; then
    echo_status "Already on branch '$TARGET_BRANCH'. No action needed."
    exit 0
fi

echo_status "Attempting to flip from '$CURRENT_BRANCH' to '$TARGET_BRANCH'..."

# --- Stash uncommitted changes on the current branch if any ---
# Check for unstaged changes (git diff --quiet --exit-code returns 1 if changes, 0 if no changes)
git diff --quiet --exit-code
has_unstaged_changes=$?

# Check for staged changes (git diff --cached --quiet --exit-code returns 1 if changes, 0 if no changes)
git diff --cached --quiet --exit-code
has_staged_changes=$?

if [ "$has_unstaged_changes" -ne 0 ] || [ "$has_staged_changes" -ne 0 ]; then
    echo_status "Uncommitted changes detected on branch '$CURRENT_BRANCH'. Stashing..."
    # Stash the changes, including untracked files (-u)
    git stash push -u -m "git flip auto-stash for $CURRENT_BRANCH"
    
    # Check the exit code of git stash push.
    # It returns 0 even if no changes were stashed (e.g., if the user manually cleared them
    # between the diff check and the stash command).
    # If it returns 1, it's a genuine error.
    if [ "$?" -ne 0 ]; then
        echo_error "Failed to stash changes on '$CURRENT_BRANCH'. Aborting flip."
        exit 1
    fi

    # Get the actual commit hash of the newly created stash (which is always stash@{0} right after push)
    NEW_STASH_HASH=$(git rev-parse stash@{0})

    if [ -z "$NEW_STASH_HASH" ]; then
        echo_error "Failed to get hash of the newly created stash. Aborting flip."
        exit 1
    fi

    echo_status "Stash created with hash: $NEW_STASH_HASH. Storing reference for '$CURRENT_BRANCH'..."
    
    # Store the stash hash in the local Git config for the current branch.
    # If this fails, print an error but don't exit, as checkout can still proceed.
    git config branch."$CURRENT_BRANCH".stashHash "$NEW_STASH_HASH" || \
        echo_error "Failed to store stash hash for '$CURRENT_BRANCH'. You may need to manually manage this stash."
else
    echo_status "No uncommitted changes on branch '$CURRENT_BRANCH'. Skipping stash."
fi

# --- Checkout the target branch ---
echo_status "Checking out branch '$TARGET_BRANCH'..."
git checkout "$TARGET_BRANCH"
if [ "$?" -ne 0 ]; then
    echo_error "Failed to checkout branch '$TARGET_BRANCH'."
    echo_error "Please ensure the branch exists and there are no conflicting changes."
    exit 1
fi

# --- Apply stashed changes on the target branch if any ---
# Retrieve any previously stored stash hash for the target branch.
STORED_STASH_HASH=$(git config branch."$TARGET_BRANCH".stashHash)

if [ -n "$STORED_STASH_HASH" ]; then
    echo_status "Found a previously stashed hash for '$TARGET_BRANCH': $STORED_STASH_HASH."
    echo_status "Attempting to apply stash..."

    # Verify if the stash commit actually exists in Git's object database
    if git rev-parse --verify "$STORED_STASH_HASH" &>/dev/null; then
        git stash apply "$STORED_STASH_HASH"
        APPLY_EXIT_CODE=$?

        if [ "$APPLY_EXIT_CODE" -eq 0 ]; then
            echo_status "Stash applied successfully."
            echo_status "Dropping applied stash and clearing reference for '$TARGET_BRANCH'..."

            # Find the index of the specific stash hash in the stash list
            # This is necessary because git stash drop requires an index, not a hash.
            STASH_INDEX=$(git stash list --format="%gd %H" | grep "$STORED_STASH_HASH" | head -n 1 | awk '{print $1}' | sed 's/stash@{//;s/}//')

            if [ -n "$STASH_INDEX" ]; then
                git stash drop "stash@{$STASH_INDEX}"
                if [ "$?" -eq 0 ]; then
                    echo_status "Stash 'stash@{$STASH_INDEX}' dropped successfully."
                else
                    echo_error "Failed to drop stash 'stash@{$STASH_INDEX}'. You may need to drop it manually."
                fi
            else
                echo_status "Could not find stash 'stash@{$STORED_STASH_HASH}' in stash list to drop. It might have been dropped already or is not a direct entry in the stash reflog."
            fi
            
            # Clear the stored reference after successful application.
            git config --unset branch."$TARGET_BRANCH".stashHash
            echo_status "Stash reference cleared."
        else
            echo_error "Failed to apply stash '$STORED_STASH_HASH' on '$TARGET_BRANCH'."
            echo_error "You may need to resolve conflicts manually. The stash reference is still stored."
            echo_error "To apply manually: git stash apply $STORED_STASH_HASH"
            echo_error "Note: To drop manually, you'll need to find its index in 'git stash list' and then 'git stash drop <index>'."
        fi
    else
        echo_status "Stored stash hash '$STORED_STASH_HASH' for '$TARGET_BRANCH' does not exist in Git history. Clearing reference."
        # Clear the reference if the stash commit is no longer found.
        git config --unset branch."$TARGET_BRANCH".stashHash || \
            echo_error "Failed to clear non-existent stash hash reference for '$TARGET_BRANCH'."
    fi
else
    echo_status "No previous 'git flip' stash found for branch '$TARGET_BRANCH'."
fi

echo_status "Flip complete!"
