#date: 2023-12-29T17:05:04Z
#url: https://api.github.com/gists/b7cd5b7074363735d348d01c09dee4aa
#owner: https://api.github.com/users/Aloha-Churchill

import numpy as np
import matplotlib.pyplot as plt

# n_steps = num steps in sim
def mersenne_twister_visualization(seed, n_steps=10):
    # Simplified parameters for visualization
    w, r = 4, 2  # word size, and number of bits for the lower bitmask
    u, d = 1, 0xF  # tempering bit shifts and masks

    # Initialize the state with the seed
    state = seed
    binary_states = []
    int_values = []

    for _ in range(n_steps):
        # Tempering transformation (simplified)
        y = state
        y ^= (y >> u) & d

        # Store states for visualization
        binary_states.append(format(y, f'0{w}b'))
        int_values.append(y)

        # Update the state (simplified, not using the actual MT recurrence)
        state = (state + 263) % 16  # A simple recurrence for demonstration

    return binary_states, int_values

# Seed value for demonstration
seed = 9

# Visualize the Mersenne Twister process
binary_states, int_values = mersenne_twister_visualization(seed, n_steps=10)

# Plotting the sequence of generated numbers
plt.figure(figsize=(10, 6))
plt.plot(int_values, marker='o')
plt.title('Sequence of Numbers Generated by Simplified Mersenne Twister')
plt.xlabel('Step')
plt.ylabel('Generated Number')
plt.xticks(ticks=range(10), labels=binary_states)
plt.grid(True)
plt.show()

binary_states, int_values
