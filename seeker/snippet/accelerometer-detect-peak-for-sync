#date: 2023-02-20T17:09:57Z
#url: https://api.github.com/gists/e3f4e7344ecd0afcce4d2d8c7d6e08a1
#owner: https://api.github.com/users/Phirxian

#!/usr/bin/python3
'''
This work was done to detect huge spikes on accelerometer sequences for synchronization.

The procedure consists of shaking all the sensors hard:
+ Shake all sensors for 2 seconds
+ Put all sensors down for 2 seconds
+ Repeat this procedure 6 times at the beginning of the experiment.
+ Repeat this procedure 5 times at the end of the experiment.

Thus this script allows to detect the first six and the last five peaks within sequences.
It was shared with Lucile Riaboff from University College Dublin.

Please note that this script methodology is totaly empirical

This work is licensed under Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
Â©Jehan-Antoine Vayssade 2023
'''

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.cluster import DBSCAN
from scipy import signal
from glob import glob

accelerometers = glob('*.csv')

for a_file in accelerometers:
    df = pd.read_csv(a_file)
    xyz = np.array(df.iloc[:,1:])
    
    axyz = abs(xyz)
    sxyz = axyz.sum(axis=1) / 3
    prod = axyz.prod(axis=1)

    sp = np.fft.fft(prod)
    freq = np.fft.fftfreq(sp.shape[-1])
    prod = sp.real * sp.imag
    
    prod = np.float32(abs(prod) > 2.) * sp
    #prod[:500] *= 0
    prod[5000:-5000] *= 0
    
    prod = np.fft.ifft(prod)
    prod = np.float32(prod > 1.2) * sxyz
    prod = signal.medfilt(prod, 13)
    
    indices = np.arange(prod.shape[0])
    indices = indices[np.where(prod > 0.6)][:, np.newaxis]
    
    clustering = DBSCAN(eps=130, min_samples=50)
    clustering.fit(indices)
    
    classes = np.zeros(prod.shape[0])
    uclasses = []
    
    for i in np.unique(clustering.labels_):
        if i < 0:
            continue
        idx = np.where(clustering.labels_ == i)
        current = indices[idx]
        a = current.min()
        b = current.max()
        uclasses.append([a, b])
        
    uclasses = np.array(uclasses)
    uclasses = uclasses[np.argsort(uclasses[:,0])]
    uclasses = uclasses[:6].tolist() + uclasses[-5:].tolist()
    
    for a,b in uclasses:
        classes[a:b] = -0.2
    
    plt.figure()
    plt.plot(classes, label='out')
    plt.plot(sxyz, label='signal')
    plt.plot(prod, label='fft')
    plt.legend()
    plt.tight_layout()
    plt.show()