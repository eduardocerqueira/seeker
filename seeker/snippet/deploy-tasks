#date: 2024-07-02T16:49:34Z
#url: https://api.github.com/gists/27367cadfff22a99a017be37f95c1bc7
#owner: https://api.github.com/users/lcatlett

#!/bin/bash

# Recommended enterprise deployment tasks for a Pantheon site environment.
# Add retries and error handling to ensure that deployment tasks complete successfully.
# Resolves common enterprise deployment challenges related to race conditions, timeouts, and idle containers.
# Logs failed site deploy tasks for automatic retries
# Usage:
# ./deploy-tasks <site-name or uuid> <environment>

SITE=$1
ENV=$2
current_dir=$3
START=$SECONDS

# # Example: Run drush [command], retrying up to 3 times if it fails
# drush_command() {
# echo "Running drush [command]..."
#   retries=3
#   while [[ $retries -gt 0 ]]; do
#     terminus -n drush ${SITE}.${ENV} -- [command] -y 2>&1
#     if [ "$?" = "0" ]; then
#       break
#     else
#       echo "::warning:: drush [command] command failed - retrying in 30 seconds."
#       sleep 30
#       retries=$((retries-1))
#     fi
#   done
# }

# drush_command

# Wake idle containers to ensure backend services are available to execute deployment tasks
function wake_env() {
    echo "Ensuring that Pantheon environments are ready to execute deployment tasks."
    echo "Waking $ENV environment."
    terminus -n env:wake "$SITE.$ENV"
}

function drush_cr() {
    # Clear Drupal cache, retrying up to 3 times if it fails
    echo "Clearing Drupal cache..."
    retries=3
    while [[ $retries -gt 0 ]]; do
        terminus -n drush ${SITE}.${ENV} -- cr 2>&1
        if [ "$?" = "0" ]; then
            break
        else
            echo "::warning:: drush cr command failed - retrying in 30 seconds."
            sleep 30
            retries=$((retries - 1))
        fi
    done
    # if the deploy task fails with a non-zero exit code, add the site to the failed-sites-<env>.txt file
    if [[ "$?" -ne 0 ]]; then
        echo "Deploy tasks failed for $SITE.$ENV"
        echo "[deploy] $SITE" >>"${current_dir}/logs/failed-sites-$ENV.txt"
    fi
}

# Run drush updb, retrying up to 3 times if it fails
function drush_updb() {
    echo "Running Drupal updates..."
    retries=3
    while [[ $retries -gt 0 ]]; do
        terminus -n drush ${SITE}.${ENV} -- updb -y 2>&1
        if [ "$?" = "0" ]; then
            break
        else
            echo "::warning:: drush updb command failed - retrying in 30 seconds."
            sleep 30
            retries=$((retries - 1))
        fi
    done

    # if the deploy task fails with a non-zero exit code, add the site to the failed-sites-<env>.txt file
    if [[ "$?" -ne 0 ]]; then
        echo "Deploy tasks failed for $SITE.$ENV"
        echo "[deploy] $SITE" >>"${current_dir}/logs/failed-sites-$ENV.txt"
    fi
}

# Check if Drupal is bootstrapped, retrying up to 3 times if it fails

function check_bootstrap() {
    local retries=3
    local DRUPAL_BOOTSTRAPPED=1
    echo "Checking if drupal is bootstrapped"
    while [ $retries -gt 0 ]; do
        terminus -n drush ${SITE}.${ENV} -- status --field=bootstrap 2>&1
        DRUPAL_BOOTSTRAPPED="$?"
        if [[ "$DRUPAL_BOOTSTRAPPED" == 0 ]]; then
            echo "Drupal bootstrapped successfully."
            break
        else
            echo "Drupal not bootstrapped, waiting 15 seconds and checking again."
            sleep 15
            retries=$((retries - 1))
            if [[ $retries -eq 0 ]]; then
                echo "Drupal not bootstrapped after 3 retries, exiting."
                DRUPAL_BOOTSTRAPPED=1

                # deploy task failed with a non-zero exit code, so add the site to the failed-sites-<env>.txt file
                echo "Deploy tasks failed for $SITE.$ENV"
                echo "[deploy] $SITE" >>"${current_dir}/logs/failed-sites-$ENV.txt"
            fi
        fi
    done

    return $DRUPAL_BOOTSTRAPPED

}

# Clear the Pantheon platform cache, retrying up to 3 times if it fails
function platform_clear_cache() {
    echo "Clearing all Pantheon caches..."
    retries=3
    while [[ $retries -gt 0 ]]; do
        # Clear the environment cache
        terminus -n env:clear-cache "$SITE"."$ENV"
        if [ "$?" = "0" ]; then
            break
        else
            echo "::warning:: clearing Pantheon caches failed - retrying in 30 seconds."
            sleep 30
            retries=$((retries - 1))
        fi
    done

    # if the deploy task fails with a non-zero exit code, add the site to the failed-sites-<env>.txt file
    if [[ "$?" -ne 0 ]]; then
        echo "Deploy tasks failed for $SITE.$ENV"
        echo "[deploy] $SITE" >>"${current_dir}/logs/failed-sites-$ENV.txt"
    fi
}

echo "Starting site deploy tasks on on ${SITE}.${ENV}" | sed "s/^/[$SITE] /" >>"${current_dir}/logs/deploy-$ENV.log"

env_wake 2>&1 | sed "s/^/[$SITE] /" >>"${current_dir}/logs/deploy-$ENV.log"

check_bootstrap 2>&1 | sed "s/^/[$SITE] /" >>"${current_dir}/logs/deploy-$ENV.log"

drush_updb | sed "s/^/[$SITE] /" >>"${current_dir}/logs/deploy-$ENV.log"

drush_cc 2>&1 | sed "s/^/[$SITE] /" >>"${current_dir}/logs/deploy-$ENV.log"

platform_clear_cache 2>&1 | sed "s/^/[$SITE] /" >>"${current_dir}/logs/deploy-$ENV.log"

# Add any additional drush commands or deploy tasks which should run here - see the drush_command function in this file for a template.
# drush_command 2>&1 | sed "s/^/[$SITE] /" >> "${current_dir}/logs/deploy-$ENV.log"

# if any of the functions above fail, the code deployment has failed. Add the site to the failed-sites.txt file.
if [[ $? -eq 0 ]]; then
    echo "Site deploy tasks successful for $SITE.$ENV" | sed "s/^/[$SITE] /" >>"${current_dir}/logs/deploy-$ENV.log"
    # if the site was
    if [[ -f "${current_dir}/logs/failed-sites-$ENV.txt" ]]; then
        sed -i "/$SITE/d" "${current_dir}/logs/failed-sites-$ENV.txt"
    fi
else
    echo "Site deploy tasks failed for $SITE.$ENV" | sed "s/^/[$SITE] /" >>"${current_dir}/logs/deploy-$ENV.log"
    echo "[deploy] $SITE" >>"${current_dir}/logs/failed-sites-$ENV.txt"
fi

# Report time to results.
DURATION=$((SECONDS - START))
TIME_DIFF=$(bc <<<"scale=2; $DURATION / 60")
MIN=$(printf "%.2f" $TIME_DIFF)
echo -e "Finished ${SITE}.${ENV} in ${MIN} minutes" | sed "s/^/[$SITE] /" >>"${current_dir}/logs/deploy-$ENV.log"
