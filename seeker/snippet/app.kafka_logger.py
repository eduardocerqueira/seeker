#date: 2022-06-17T17:02:31Z
#url: https://api.github.com/gists/471bc58e08abcddfb2d6229a40b5aa9a
#owner: https://api.github.com/users/katrbhach

import logging
import time
from app import app
from .env_constants import EnvironmentConstants
from confluent_kafka import SerializingProducer
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.json_schema import JSONSerializer


class KafkaLoggingHandler(logging.Handler):

    def __init__(self):

        logging.Handler.__init__(self)

        schema_reg_conf = {
            'url': EnvironmentConstants.audit_schema_reg_url,
            'basic.auth.user.info': '{}:{}'.format(EnvironmentConstants.audit_schema_reg_username,
                                                   EnvironmentConstants.audit_schema_reg_password)
        }

        schema_registry_client = SchemaRegistryClient(schema_reg_conf)

        schema_str = """
        {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "title": "AuditLog",
            "description": "An audit log generated by DDS API micro-services",
            "type": "object",
            "properties": {
                "source": {
                    "description": "Source from which the audit log was generated",
                    "type": "string"
                },
                "op_entity_type": {
                    "description": "Type of entity we're dealing with",
                    "enum": ["topic"]
                },
                "op": {
                    "description": "Operation we're performing on the entity",
                    "enum": ["create", "alter", "delete"]
                },
                "op_entity_name": {
                    "description": "Name of the entity we're dealing with",
                    "type": "string"
                },
                "env": {
                    "description": "Setup we're dealing with i.e., development, int, production etc.",
                    "enum": ["azdv", "azin", "azpr", "aztr", "dev", "emlog", "int", "prd", "replnp", "replprd", "trn"]
                },
                "tags": {
                    "description": "Tags needed for filtering etc.",
                    "type": "object",
                    "additionalProperties": true
                },
                "payload": {
                    "description": "Payload sent to the API",
                    "type": "object",
                    "additionalProperties": true
                }
            },
            "required": ["source", "op_entity_type", "op", "op_entity_name", "env", "tags", "payload"],
            "additionalProperties": false
        }
        """

        json_serializer = JSONSerializer(schema_str, schema_registry_client)

        kafka_prod_conf = {
            'bootstrap.servers': EnvironmentConstants.audit_kafka_bootstrap_servers,
            'client.id': "audit-logger",
            'security.protocol': "SASL_SSL",
            'sasl.mechanisms': "PLAIN",
            'sasl.username': EnvironmentConstants.audit_kafka_username,
            'sasl.password': EnvironmentConstants.audit_kafka_password,
            'value.serializer': json_serializer
        }

        self.producer: SerializingProducer = SerializingProducer(kafka_prod_conf)

    def emit(self, record):

        if record.name == "kafka":
            return

        try:

            # noinspection PyTypeChecker
            msg: dict = record.msg

            if "send_to_mongo" in msg:

                msg["tags"] = {
                    "requested_at_epoch": int(time.time()),
                    "send_to_mongo": msg["send_to_mongo"]
                }

                del msg["send_to_mongo"]

            else:

                msg["tags"] = {
                    "requested_at_epoch": int(time.time()),
                    "send_to_mongo": False
                }

            if "payload" not in msg:
                msg["payload"] = dict()

            # produce message
            self.producer.produce("audit-logs", key=None, value=msg)
            self.producer.flush()

        except Exception:

            app.logger.exception("failed to produce audit-log to kafka. Log is {}".format(record.msg))


audit_logger = logging.getLogger(__name__)
audit_logger.setLevel(logging.INFO)
audit_logger.addHandler(KafkaLoggingHandler())
