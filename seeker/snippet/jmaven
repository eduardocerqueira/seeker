#date: 2025-09-17T16:56:13Z
#url: https://api.github.com/gists/2ac83fc3b56f770399098cb7ebea429e
#owner: https://api.github.com/users/WomB0ComB0

#!/usr/bin/env bash
set -euo pipefail

# Defaults
NAME=""
GROUP_ID="com.example"
ARTIFACT_ID=""
PACKAGE=""
ARCH_GID="org.apache.maven.archetypes"
ARCH_AID="maven-archetype-quickstart"
ARCH_VER="1.5"           # Quickstart page lists 1.5 as current
JAVA_VER=""              # If unset, archetype default is used
JUNIT_VER=""             # If unset, archetype default is used
OUTPUT_DIR="$(pwd)"
BATCH=true
DRY_RUN=false
FORCE=false

usage() {
  cat <<'EOF'
Usage: new-mvn.sh [-n NAME] [-g GROUP_ID] [-a ARTIFACT_ID] [-p PACKAGE]
                  [-G ARCH_GROUP_ID] [-T ARCH_ARTIFACT_ID] [-A ARCH_VERSION]
                  [-J JAVA_COMPILER_VERSION] [-U JUNIT_VERSION]
                  [-o OUTPUT_DIR] [--no-batch] [--dry-run] [-f] [-h]

Options:
  -n NAME                     Human-friendly project/app name (used to derive artifactId if -a not set)
  -g GROUP_ID                 Maven groupId (default: com.example)
  -a ARTIFACT_ID              Maven artifactId (default: derived from NAME)
  -p PACKAGE                  Base Java package (default: GROUP_ID + '.' + artifactId with '-' -> '_')
  -G ARCH_GROUP_ID            Archetype groupId (default: org.apache.maven.archetypes)
  -T ARCH_ARTIFACT_ID         Archetype artifactId (default: maven-archetype-quickstart)
  -A ARCH_VERSION             Archetype version (default: 1.5)
  -J JAVA_COMPILER_VERSION    Passes -DjavaCompilerVersion (optional)
  -U JUNIT_VERSION            Passes -DjunitVersion (optional)
  -o OUTPUT_DIR               Where to generate the project (default: current dir)
  --no-batch                  Don’t use Maven batch mode (-B)
  --dry-run                   Print the mvn command without executing
  -f                          Force: skip existence checks on target directory
  -h                          Show this help
EOF
}

slugify_artifact() {
  # Lowercase, spaces/underscores -> '-', remove invalid chars, collapse dashes
  local s="${1,,}"
  s="${s// /-}"
  s="${s//_/-}"
  s="$(echo "$s" | sed -E 's/[^a-z0-9.-]+/-/g; s/-+/-/g; s/^-+//; s/-+$//')"
  # Ensure not empty
  if [[ -z "$s" ]]; then s="app"; fi
  echo "$s"
}

pkg_from_group_and_artifact() {
  local gid="$1"
  local aid="$2"
  # artifactId '-' -> '_' for a legal package segment
  local seg="${aid//-/_}"
  # Remove illegal characters from package segment
  seg="$(echo "$seg" | sed -E 's/[^A-Za-z0-9_]+/_/g')"
  echo "${gid}.${seg}"
}

require_cmd() {
  command -v "$1" >/dev/null 2>&1 || { echo "Error: '$1' not found in PATH" >&2; exit 127; }
}

# Parse args
while (( "$#" )); do
  case "$1" in
    -n) NAME="$2"; shift 2;;
    -g) GROUP_ID="$2"; shift 2;;
    -a) ARTIFACT_ID="$2"; shift 2;;
    -p) PACKAGE="$2"; shift 2;;
    -G) ARCH_GID="$2"; shift 2;;
    -T) ARCH_AID="$2"; shift 2;;
    -A) ARCH_VER="$2"; shift 2;;
    -J) JAVA_VER="$2"; shift 2;;
    -U) JUNIT_VER="$2"; shift 2;;
    -o) OUTPUT_DIR="$2"; shift 2;;
    --no-batch) BATCH=false; shift;;
    --dry-run) DRY_RUN=true; shift;;
    -f) FORCE=true; shift;;
    -h|--help) usage; exit 0;;
    *) echo "Unknown option: $1" >&2; usage; exit 2;;
  esac
done

# Derive artifactId from NAME if needed
if [[ -z "${ARTIFACT_ID}" ]]; then
  if [[ -z "${NAME}" ]]; then
    echo "Error: provide at least -n NAME or -a ARTIFACT_ID" >&2
    usage; exit 2
  fi
  ARTIFACT_ID="$(slugify_artifact "$NAME")"
fi

# Derive package if missing
if [[ -z "${PACKAGE}" ]]; then
  PACKAGE="$(pkg_from_group_and_artifact "$GROUP_ID" "$ARTIFACT_ID")"
fi

# Prepare target directory check
TARGET_DIR="${OUTPUT_DIR%/}/${ARTIFACT_ID}"
if ! $FORCE; then
  if [[ -e "$TARGET_DIR" ]]; then
    echo "Error: target directory already exists: $TARGET_DIR (use -f to override)" >&2
    exit 3
  fi
fi

require_cmd mvn

# Build mvn command
args=()
$BATCH && args+=("-B")
args+=("archetype:generate")
args+=("-DarchetypeGroupId=${ARCH_GID}")
args+=("-DarchetypeArtifactId=${ARCH_AID}")
args+=("-DarchetypeVersion=${ARCH_VER}")
args+=("-DgroupId=${GROUP_ID}")
args+=("-DartifactId=${ARTIFACT_ID}")
args+=("-Dpackage=${PACKAGE}")
args+=("-DoutputDirectory=${OUTPUT_DIR}")
# Only pass Java/JUnit if explicitly set
[[ -n "$JAVA_VER"  ]] && args+=("-DjavaCompilerVersion=${JAVA_VER}")
[[ -n "$JUNIT_VER" ]] && args+=("-DjunitVersion=${JUNIT_VER}")

echo ">>> Running:"
printf 'mvn %q ' "${args[@]}"
echo
if $DRY_RUN; then
  echo "(dry run)"; exit 0
fi

mvn "${args[@]}"

echo
echo "✓ Project generated at: ${TARGET_DIR}"
echo "  Next steps:"
echo "    cd ${TARGET_DIR}"
echo "    mvn -q -ntp test"
