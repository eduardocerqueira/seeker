#date: 2022-02-18T17:10:59Z
#url: https://api.github.com/gists/b79dc786f3a583807ad2f4ca6ccb14a0
#owner: https://api.github.com/users/trickybestia

#!/usr/bin/env python

import argparse
from io import TextIOWrapper
from os import system
import sys


class Args:
    torrc: TextIOWrapper
    bridges: TextIOWrapper
    append: bool
    restart_tor: bool

    def __init__(self):
        parser = argparse.ArgumentParser()

        parser.add_argument('--torrc', default='/etc/tor/torrc',
                            type=argparse.FileType('a+'), help='path to torrc')
        parser.add_argument('--append', default=True, action=argparse.BooleanOptionalAction,
                            help='append bridges instead of rewriting')
        parser.add_argument('--bridges', default=sys.stdin,
                            type=argparse.FileType('r'), help='path to file with bridges')
        parser.add_argument('--restart-tor', default=True, action=argparse.BooleanOptionalAction,
                            help='run \'systemctl is-active tor --quiet && systemctl restart tor\' after changing torrc')

        args = parser.parse_args()

        self.torrc = args.torrc
        self.bridges = args.bridges
        self.append = args.append
        self.restart_tor = args.restart_tor


def format_bridges(bridges: list[str]) -> list[str]:
    '''
    Transform bridges in BridgeDB format to torrc format
    '''

    return list(f"Bridge {bridge}" for bridge in bridges)


def main():
    args = Args()

    bridges = format_bridges(args.bridges.readlines())

    if not args.append:
        lines = []

        args.torrc.seek(0)

        for line in args.torrc.readlines():
            if not line.startswith('Bridge '):
                lines.append(line)

        args.torrc.truncate(0)
        args.torrc.writelines(lines)

    args.torrc.writelines(bridges)

    if args.restart_tor:
        system('systemctl is-active tor --quiet && systemctl restart tor')


if __name__ == '__main__':
    main()
