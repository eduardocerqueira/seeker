#date: 2025-05-13T17:05:35Z
#url: https://api.github.com/gists/fd05c31bd06ef17550f0a24ef0a1a935
#owner: https://api.github.com/users/ficnawode

#!/bin/bash

TARGET_SSID="iPhone Tobiasz" 
PING_HOST="google.com"
PING_INTERVAL=30 
LOG_FILE="/tmp/ping_hotspot_dispatcher.log"
PID_FILE_BASE="/var/run/ping_hotspot_dispatcher" 

IFACE="$1"  # Interface name (e.g., wlan0)
ACTION="$2" # Action (e.g., "up", "down", "pre-up", "post-down")

log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $IFACE ($ACTION): $1" >> "$LOG_FILE"
}


log_message "Dispatcher script triggered."

PID_FILE="${PID_FILE_BASE}_${IFACE}.pid"

if [ "$ACTION" == "up" ]; then
    log_message "Interface is up. Checking connection details..."

    ACTIVE_CONNECTION_NAME=$(nmcli -t -f DEVICE,NAME c show --active | grep "^${IFACE}:" | cut -d':' -f2)

    if [ -z "$ACTIVE_CONNECTION_NAME" ]; then
        log_message "No active connection name found for $IFACE."
        exit 0
    fi
    log_message "Active connection name on $IFACE is '$ACTIVE_CONNECTION_NAME'."

    CURRENT_SSID=$(nmcli -t -f 802-11-wireless.ssid c show "$ACTIVE_CONNECTION_NAME" 2>/dev/null | sed 's/^802-11-wireless.ssid://')

    if [ -z "$CURRENT_SSID" ]; then
        log_message "Could not determine SSID for connection '$ACTIVE_CONNECTION_NAME' using 802-11-wireless.ssid."
        exit 0
    fi

    log_message "Current SSID for connection '$ACTIVE_CONNECTION_NAME' is '$CURRENT_SSID'."

    if [ "$CURRENT_SSID" == "$TARGET_SSID" ]; then
        log_message "Target SSID '$TARGET_SSID' matched."

        if [ -f "$PID_FILE" ]; then
            EXISTING_PID=$(cat "$PID_FILE")
            if ps -p "$EXISTING_PID" > /dev/null; then
                log_message "Ping process with PID $EXISTING_PID already running. Not starting another."
                exit 0
            else
                log_message "Stale PID file found. Removing."
                rm -f "$PID_FILE"
            fi
        fi

        log_message "Starting ping process for $PING_HOST..."
        (
            trap 'trap - SIGTERM && kill -- -$$' SIGINT SIGTERM EXIT

            while true; do
                ping_output=$(ping -c 1 -W 2 "$PING_HOST" 2>&1) # -W 2 for 2 second timeout
                exit_status=$?
                timestamp=$(date '+%Y-%m-%d %H:%M:%S')

                if [ $exit_status -eq 0 ]; then
                    echo "$timestamp - PING to $PING_HOST: SUCCESS" >> "$LOG_FILE"
                else
                    echo "$timestamp - PING to $PING_HOST: FAILED (Status: $exit_status)" >> "$LOG_FILE"
                fi
                sleep "$PING_INTERVAL"
            done
        ) & 

        echo $! > "$PID_FILE"
        log_message "Ping process started with PID $(cat "$PID_FILE"). Logging to $LOG_FILE."

    else
        log_message "Current SSID '$CURRENT_SSID' does not match target '$TARGET_SSID'. Doing nothing."
    fi

elif [ "$ACTION" == "down" ] || [ "$ACTION" == "pre-down" ]; then
    log_message "Interface is going down or pre-down. Checking if our ping process needs to be stopped..."
    if [ -f "$PID_FILE" ]; then
        PID_TO_KILL=$(cat "$PID_FILE")
        log_message "Found PID file $PID_FILE with PID $PID_TO_KILL."
        if ps -p "$PID_TO_KILL" > /dev/null; then
            log_message "Stopping ping process with PID $PID_TO_KILL..."
            kill -- -"$PID_TO_KILL" 
            sleep 1 
            if ps -p "$PID_TO_KILL" > /dev/null; then
                log_message "Process $PID_TO_KILL did not terminate with SIGTERM, sending SIGKILL."
                kill -9 -- -"$PID_TO_KILL"
            else
                log_message "Process $PID_TO_KILL terminated successfully."
            fi
        else
            log_message "Process with PID $PID_TO_KILL not found (already stopped or PID stale)."
        fi
        rm -f "$PID_FILE"
        log_message "Removed PID file $PID_FILE."
    else
        log_message "No PID file $PID_FILE found. Nothing to stop for this interface."
    fi
fi

log_message "Dispatcher script finished."
exit 0
