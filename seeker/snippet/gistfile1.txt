#date: 2025-09-04T17:04:41Z
#url: https://api.github.com/gists/1a7b2d825125584c34153b75b4c4ed91
#owner: https://api.github.com/users/Aigle9

#!/usr/bin/env python3
"""
Top Credential Malware Monitoring Script

- Detects indicators from top credential-stealer families.
- Produces a structured report and optional alerts.

Usage:
  python script_top_credential_malware_monitoring.py --indicators indicators.json --logs logs.json --output report.json
"""

import argparse
import json
import logging
from datetime import datetime
from typing import Any, Dict, List

LOG_FMT = "%(asctime)s [%(levelname)s] %(message)s"
logging.basicConfig(level=logging.INFO, format=LOG_FMT)

def load_json(path: str) -> Any:
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def main(args: argparse.Namespace) -> None:
    indicators = load_json(args.indicators)  # expected shape: {"fingerprints": ["Redline", ...]}
    logs = load_json(args.logs)  # list of event objects

    fingerprints: List[str] = []
    if isinstance(indicators, dict):
        fingerprints = indicators.get("fingerprints", [])
    elif isinstance(indicators, list):
        fingerprints = indicators  # fallback

    hits: List[Dict[str, Any]] = []
    for event in logs if isinstance(logs, list) else []:
        message = str(event.get("message", "")) if isinstance(event, dict) else ""
        details = str(event.get("details", "")) if isinstance(event, dict) else ""
        for ind in fingerprints:
            if ind in message or ind in details:
                hits.append({
                    "event_id": event.get("id"),
                    "indicator": ind,
                    "ts": event.get("ts"),
                    "source": event.get("source"),
                })

    report = {
        "generated_at": datetime.utcnow().isoformat() + "Z",
        "hits_detected": len(hits),
        "hits": hits
    }

    out_path = args.output or "top_credential_malware_report.json"
    with open(out_path, "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2)
    logging.info("Report written to %s", out_path)

if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument("--indicators", required=True, help="Path to indicators.json")
    p.add_argument("--logs", required=True, help="Path to logs.json")
    p.add_argument("--output", help="Output path for report JSON")
    p.add_argument("--config", help="Optional config path")
    main(p.parse_args())