#date: 2025-05-13T16:46:56Z
#url: https://api.github.com/gists/d79a3b846c7c36a80c4f5aa3a9a492ab
#owner: https://api.github.com/users/jwrightmm

#!/usr/bin/env python3
"""
Script: clean_sql_dump.py

Reads a SQL dump file, removes emojis and unwanted control characters,
converts null bytes to MySQL-friendly '\\0', and writes a cleaned SQL file.
"""
import re
import sys
import argparse

# Regex pattern to match common emoji ranges
emoji_pattern = re.compile(
    u"["
    u"\U0001F600-\U0001F64F"  # Emoticons
    u"\U0001F300-\U0001F5FF"  # Symbols & pictographs
    u"\U0001F680-\U0001F6FF"  # Transport & map symbols
    u"\U0001F1E0-\U0001F1FF"  # Flags
    u"\u2600-\u27BF"          # Dingbats
    u"]+", 
    flags=re.UNICODE
)

# Pattern to remove control characters except null (\x00), tab, newline, carriage return
control_char_pattern = re.compile(r"[\x01-\x08\x0B-\x0C\x0E-\x1F\x7F]")


def clean_text(text: str) -> str:
    """
    Removes emojis, converts null bytes to '\\0', and strips other control characters.
    """
    # Remove emojis
    text = emoji_pattern.sub("", text)
    # Replace null bytes with MySQL escape sequence
    text = text.replace("\x00", "\\0")
    # Remove other non-printable/control characters
    text = control_char_pattern.sub("", text)
    return text


def process_file(input_path: str, output_path: str) -> None:
    """
    Processes the input SQL dump file line by line, cleans each line,
    and writes the cleaned content to the output file.
    """
    with open(input_path, 'r', encoding='utf-8', errors='ignore') as infile, \
         open(output_path, 'w', encoding='utf-8') as outfile:
        for line in infile:
            cleaned = clean_text(line)
            outfile.write(cleaned)


def main():
    parser = argparse.ArgumentParser(
        description='Clean a SQL dump by removing emojis and control characters.'
    )
    parser.add_argument(
        'input', help='Path to the input SQL dump file'
    )
    parser.add_argument(
        'output', help='Path to write the cleaned SQL file'
    )
    args = parser.parse_args()

    process_file(args.input, args.output)
    print(f"Cleaning complete. Cleaned dump saved to: {args.output}")


if __name__ == '__main__':
    main()
