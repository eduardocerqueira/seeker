#date: 2025-09-18T17:03:38Z
#url: https://api.github.com/gists/e92fb6ff75ddae1fdea7c8fe09503519
#owner: https://api.github.com/users/markza0989

#!/usr/bin/env python3
import subprocess, sys, time, re, collections, os

IFACE = os.environ.get("IFACE", "en0")        # change if needed (e.g., en1)
WINDOW = int(os.environ.get("WINDOW", "15"))  # seconds to observe
THRESH = int(os.environ.get("THRESH", "12"))  # ports from same IP within WINDOW
COOLDOWN = int(os.environ.get("COOLDOWN", "120"))  # min seconds between alerts per IP

def my_ip(iface):
    try:
        return subprocess.check_output(["ipconfig", "getifaddr", iface]).decode().strip()
    except subprocess.CalledProcessError:
        sys.exit(f"Could not get IP for {iface}. Set IFACE or pick the right interface.")

IP = my_ip(IFACE)

# BPF filter: only packets TO me that look like scans:
#  - SYNs (common for -sS)
#  - NULL scans (no flags)
#  - Xmas scans (FIN+PSH+URG)
bpf = f'dst host {IP} and tcp and ((tcp[13] & 0x02) != 0 or tcp[13] == 0 or (tcp[13] & 0x29) == 0x29)'

# Start tcpdump (line-buffered)
proc = subprocess.Popen(
    ["sudo", "tcpdump", "-n", "-l", "-i", IFACE, bpf],
    stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True, bufsize=1
)

pat = re.compile(r"IP\s+(\d+\.\d+\.\d+\.\d+)\.(\d+)\s*>\s*(\d+\.\d+\.\d+\.\d+)\.(\d+):")
seen = {}  # src_ip -> {"ports": {(port, t)}, "first": t, "last_alert": t}
print(f"[scanwatch] Monitoring {IFACE} ({IP}) â€” window={WINDOW}s, threshold={THRESH} ports")

def notify(msg):
    subprocess.call(["osascript", "-e", f'display notification "{msg}" with title "Port scan detected"'])

try:
    for line in proc.stdout:
        m = pat.search(line)
        if not m:
            continue
        src, sport, dst, dport = m.group(1), int(m.group(2)), m.group(3), int(m.group(4))
        now = time.time()
        info = seen.setdefault(src, {"ports": collections.deque(), "first": now, "last_alert": 0})

        # drop old entries outside the window
        while info["ports"] and now - info["ports"][0][1] > WINDOW:
            info["ports"].popleft()

        info["ports"].append((dport, now))

        unique_ports = len(set(p for p, _ in info["ports"]))
        if unique_ports >= THRESH and now - info["last_alert"] > COOLDOWN:
            msg = f"{src} hit {unique_ports} ports in ~{int(now - info['ports'][0][1])}s"
            print("[alert]", msg)
            notify(msg)
            info["last_alert"] = now
except KeyboardInterrupt:
    pass
finally:
    try:
        proc.terminate()
    except Exception:
        pass
