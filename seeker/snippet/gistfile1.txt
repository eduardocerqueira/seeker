#date: 2025-02-11T16:50:39Z
#url: https://api.github.com/gists/1aad52fc4acb0a071ab3896e36d7fdb5
#owner: https://api.github.com/users/MichelBaie

#!/bin/bash
# install_marionnet_non_interactif.sh
#
# Version non-interactive pour Debian.
# Les interactions (read, prompts) sont supprimées – tout est validé automatiquement.
# Les commandes d'installation APT ont été supprimées.
#
# Basé sur le script d'origine de marionnet.
#
# Licence GPL – Voir l'entête d'origine.

set -e
shopt -s nullglob
shopt -s expand_aliases

# Pour éviter des problèmes avec CDPATH ou un umask trop restrictif :
unset CDPATH
umask 022

# Pour exécuter les commandes avec sudo si nécessaire (ici non interactif, on suppose que sudo fonctionne sans demande ou que l'on est root)
if [[ $USER = root ]]; then
  export SUDO_OR_EVAL=eval
  export SUDO_OR_NOTHING=
else
  export SUDO_OR_EVAL="sudo -E"
  export SUDO_OR_NOTHING="sudo -E"
fi

# Fonction d'arrêt en cas d'erreur
function exiting_because_error {
  echo -e "Exiting because of an unexpected error in line $BASH_LINENO"
  if [[ $KEEP_DEBRIS = no ]]; then
    rm -rf "$TWDIR"
  fi
  exit 3
}
trap exiting_because_error ERR

# --- Quelques fonctions utilitaires (abspath, realpath) ---
function abspath {
  local B=$(basename "$1")
  local D=$(dirname "$1")
  (builtin cd "$D"; echo "$PWD/$B")
}
# Si realpath n'est pas installé, on utilise abspath.
type -t realpath &>/dev/null || {
  function realpath { abspath "$@"; }
  export -f realpath
}

# Sauvegarde de la ligne de commande
COMMAND_LINE="$(type -p "$0" || realpath "$0")"
COMMAND_LINE="$(realpath "$COMMAND_LINE") $@"

# On active le mode non interactif et on fixe DEBIAN_FRONTEND
NON_INTERACTIVE=1
export DEBIAN_FRONTEND=noninteractive

# --- Paramètres par défaut (on pourrait ajouter ici la lecture d'options si besoin) ---
PREFIX=$(realpath /usr/local)
TMPDIR=$(realpath "${TMPDIR:-/tmp}")
MARIONNET_SERIES="0.98.x"
MARIONNET_VERSION="latest"
VDE2_VERSION="latest"
GRAPHVIZ_VERSION="latest"
KEEP_DEBRIS=no
IGNORE_VDE=no
IGNORE_DOT=no
IGNORE_KERNELS=no
IGNORE_TINY_FILESYSTEMS=no
IGNORE_LARGE_FILESYSTEMS=no
DOWNLOAD_ONLY=no

# --- Préparation d'un répertoire temporaire ---
function tmpfile {
  if [[ -z $TWDIR ]]; then
    TWDIR=$(mktemp -p "$TMPDIR" -d "${0##*/}.XXXXXXXX")
    trap "echo 'Signal reçu – arrêt.'; rm -rf $TWDIR; exit 2" 2 3 6 15
  fi
  if [[ $# -eq 0 ]]; then
    tmpfile=$(mktemp -p "$TWDIR" tmpfile.XXXXXXXX)
  else
    tmpfile=$(mktemp -p "$TWDIR" "$@")
  fi
  echo "$tmpfile"
}

# --- Quelques fonctions utilitaires d'affichage ---
function wait_printing_dots {
  while sleep 2 && jobs %% &>/dev/null; do echo -n "."; done
}
function define_global_TAB {
  local i COLS
  if [[ -z "$TERM" ]]; then
    COLUMNS=80
  elif type tput &>/dev/null; then
    COLUMNS=$(tput cols 2>/dev/null)
    # Si tput ne retourne rien, on prend 80
    [[ -z "$COLUMNS" ]] && COLUMNS=80
  else
    COLUMNS=80
  fi
  if [[ $COLUMNS -gt 104 ]]; then
    COLS=104
  else
    COLS=$COLUMNS
  fi
  global_TAB='\r'
  for ((i=1; i<=(COLS/8)-1; i++)); do
    global_TAB+='\t'
  done
}
define_global_TAB
function echo_at_right_side {
  local NEWLINE=""
  if [[ $1 == "--newline" ]]; then NEWLINE="\n"; shift; fi
  eval echo -en "'$global_TAB'"
  eval printf "'%4s$NEWLINE'" "$1"
}
function wait_printing_percent_progress {
  if [[ -z $1 ]]; then
    wait_printing_dots
  else
    local SECTION_SIZE=$1
    local LOGSIZE
    LOGSIZE=$(wc -c < "$LOGFILE")
    local OFFSET=$LOGSIZE
    local TAB=${2:-$global_TAB}
    local PERCENT
    while sleep 2 && jobs %% &>/dev/null; do
      LOGSIZE=$(wc -c < "$LOGFILE")
      eval echo -en "'$TAB'"
      PERCENT=$((100*(LOGSIZE-OFFSET)/SECTION_SIZE))
      (( PERCENT > 100 )) && PERCENT=100
      printf "%3d%%" $PERCENT
    done
    eval echo -en "'$TAB'"
    printf "100%%"
  fi
}
# --- Fonction principale pour lancer une commande et logger sa progression ---
function launch_and_log {
  local DO_NOT_REGISTER=
  if [[ $1 == "--do-not-register-as-done" ]]; then shift; DO_NOT_REGISTER=y; fi
  local EVAL_OR_SUDO=eval
  local AS_SCRIPT=
  if [[ $1 == "--as-root" || $1 == "--sudo" ]]; then shift; EVAL_OR_SUDO=$SUDO_OR_EVAL; fi
  if [[ $1 == "--as-script" || $1 == "--script" ]]; then shift; AS_SCRIPT=yes; fi
  echo -n "* $1 ..."
  if grep < "$ALREADY_DONE" -q "^$1 DONE$"; then
    echo_at_right_side "done"
    echo
    return 0
  fi
  local CMD="{ $2 2>&1 || echo 1 > $COMMAND_RESULT; } 1>&2"
  local SECTION_SIZE=$3
  echo -e "===\nCHECKPOINT: $1\n===\n" >&2
  echo 0 > "$COMMAND_RESULT"
  case $AS_SCRIPT in
    yes)
      local TMPSCRIPT
      TMPSCRIPT=$(tmpfile script.XXXXXX)
      {
        echo '#!/bin/bash'
        echo "export PATH=$PATH"
        echo "$CMD"
      } > "$TMPSCRIPT"
      chmod +x "$TMPSCRIPT"
      $EVAL_OR_SUDO "$TMPSCRIPT" &
      ;;
    *)
      $EVAL_OR_SUDO "$CMD" &
      ;;
  esac
  wait_printing_percent_progress "$SECTION_SIZE"
  sync
  local RETURN_CODE
  RETURN_CODE=$(<"$COMMAND_RESULT")
  if [[ $RETURN_CODE -eq 1 ]]; then
    echo "FAILED!"
    echo "Last 20 lines of log ($LOGFILE):"
    echo "======"
    tail -n 20 "$LOGFILE"
    echo "======"
    echo "Exiting."
  else
    echo
    if [[ -z $DO_NOT_REGISTER ]]; then
      echo "$1 DONE" >> "$ALREADY_DONE"
    fi
  fi
  return $RETURN_CODE
}

# --- Quelques fonctions de téléchargement ---
alias wget='wget --no-check-certificate'
export WGET='wget --no-check-certificate'

function download_tar_gz_from_definite_url {
  local BASENAME="$1"
  local URL="$2"
  { wget -O - "$URL" | tar xvzf - 1>&2; } || return 1
  ln -s ${BASENAME}-* ${BASENAME} || true
  return 0
}

function download_latest_tar_gz_from_url {
  local BASENAME="$1"
  local VERSION="${2:-[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*}"
  local URL="$3"
  local TGZ
  TGZ=$(tmpfile)
  { wget -O - "$URL" | grep -o "href=\".*${BASENAME}-${VERSION}[.]tar[.]gz[0-9A-Za-z/_-]*\"" | cut -d\" -f2; } > "$TGZ" || return 1
  LATEST=$(grep < "$TGZ" -o "${VERSION}[.]tar[.]gz" | tr '.' ' ' | sort -n | tr ' ' '.' | tail -n 1)
  if [[ -z "$LATEST" ]]; then
    echo "No latest version of $BASENAME found in $URL." 1>&2
    return 2
  else
    echo "Latest version $LATEST of $BASENAME found in $URL." 1>&2
  fi
  TGZ=$(grep < "$TGZ" -o ".*${BASENAME}-${LATEST}[0-9A-Za-z/_-]*")
  if [[ ${TGZ#http://} == "$TGZ" && ${TGZ#https://} == "$TGZ" && ${TGZ#ftp://} == "$TGZ" ]]; then
    TGZ="${URL%/*}/$TGZ"
  fi
  { wget -O - "$TGZ" | tar xvzf - 1>&2; } || return 1
  ln -s ${BASENAME}-* ${BASENAME} || true
  return 0
}

function download_latest_tar_gz {
  local VERSION
  if [[ $1 == '-v' || $1 == '--version' ]]; then
    VERSION="$2"
    shift 2 || return 2
  else
    VERSION="[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*"
  fi
  if [[ $VERSION == latest || -z $VERSION ]]; then
    VERSION="[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*"
  fi
  local BASENAME="$1"
  shift || return 2
  local URL
  local TGZ
  TGZ=$(tmpfile)
  for URL in "$@"; do
    download_latest_tar_gz_from_url "$BASENAME" "$VERSION" "$URL" "$TGZ" && {
      rm -f "$TGZ"
      return 0
    }
  done
  rm -f "$TGZ"
  return 1
}

# --- Fonctions de téléchargement spécifiques ---
function download_latest_vde {
  local VERSION=${VDE2_VERSION:-2.3.2}
  local URL="http://sourceforge.net/projects/vde/files/vde2/2.3.2/vde2-2.3.2.tar.gz"
  download_tar_gz_from_definite_url vde2 "$URL" || \
    download_latest_tar_gz -v "$VERSION" vde2 "$OUR_MIRROR"
}

function download_latest_marionnet {
  local VERSION=${MARIONNET_VERSION:-latest}
  download_latest_tar_gz -v "$VERSION" marionnet "https://launchpad.net/marionnet" "$OUR_MIRROR"
}

function download_marionnet_trunk {
  bzr branch lp:marionnet
}

function download_latest_graphviz {
  local VERSION=${GRAPHVIZ_VERSION:-latest}
  download_latest_tar_gz -v "$VERSION" graphviz "http://www.graphviz.org/Download_source.php" "$OUR_MIRROR"
}

# --- Fonctions "Debian" – ici nous ne faisons rien avec APT ---
function are_we_in_debian_or_derived {
  command -v dpkg &>/dev/null && dpkg -L bash 2>/dev/null | grep -q "$(command -v bash)" &&
  dpkg -L apt 2>/dev/null | grep -q "$(command -v apt-get)"
}
# La section qui installait automatiquement des paquets via APT a été supprimée.

# --- Téléchargement de nos kernels et filesystems ---
function download_our_kernels {
  local KERNELS
  KERNELS=$(wget -O - "$OUR_BASE_URL" | grep -o 'href="kernels_[^"]*"' | grep -o "kernels_[^\"]*[.]tar[.]gz")
  local i WEIGHT
  for i in $KERNELS; do
    case "$i" in
      kernels_linux-*.tar.gz)
        WEIGHT=7000
        launch_and_log --sudo --script "Installing $i" "{ $WGET -O - '$OUR_BASE_URL/$i' | tar xvzf - 1>&2; }" $WEIGHT
        ;;
      *) ;;
    esac
  done
}

function download_our_large_filesystems {
  local FILESYSTEMS
  FILESYSTEMS=$(wget -O - "$OUR_BASE_URL" | grep -o 'href="filesystems_[^"]*"' | grep -o "filesystems_[^\"]*[.]tar[.]gz")
  local i WEIGHT
  for i in $FILESYSTEMS; do
    case "$i" in
      filesystems_machine-*.tar.gz)
        WEIGHT=800000
        launch_and_log --sudo --script "Installing $i" "{ $WGET -O - '$OUR_BASE_URL/$i' | tar xvzf - 1>&2; }" $WEIGHT
        ;;
      *) ;;
    esac
  done
}

function download_our_tiny_filesystems {
  local FILESYSTEMS
  FILESYSTEMS=$(wget -O - "$OUR_BASE_URL" | grep -o 'href="filesystems_[^"]*"' | grep -o "filesystems_[^\"]*[.]tar[.]gz")
  local i WEIGHT
  for i in $FILESYSTEMS; do
    case "$i" in
      "filesystems_pinocchio.tar.gz")
        WEIGHT=77543
        launch_and_log --sudo --script "Installing $i" "{ $WGET -O - '$OUR_BASE_URL/$i' | tar xvzf - 1>&2; }" $WEIGHT
        ;;
      "filesystems_guignol.tar.gz")
        WEIGHT=27175
        launch_and_log --sudo --script "Installing $i" "{ $WGET -O - '$OUR_BASE_URL/$i' | tar xvzf - 1>&2; }" $WEIGHT
        ;;
      *) ;;
    esac
  done
}

function download_marionnet_kernels_and_filesystems {
  ensure_sudo
  $SUDO_OR_NOTHING mkdir -p "$PREFIX/share/marionnet/"
  pushd "$PREFIX/share/marionnet/" 1>&2
  if [[ $IGNORE_KERNELS == yes ]]; then
    echo -n "* Installing kernels: dependency ignored (--no-kernels)"
    echo_at_right_side --newline "ok"
  else
    download_our_kernels
  fi
  if [[ $IGNORE_TINY_FILESYSTEMS == yes ]]; then
    echo -n "* Installing tiny filesystems: dependency ignored (--no-tiny)"
    echo_at_right_side --newline "ok"
  else
    download_our_tiny_filesystems
  fi
  if [[ $IGNORE_LARGE_FILESYSTEMS == yes ]]; then
    echo -n "* Installing large filesystems: dependency ignored (--no-filesystems)"
    echo_at_right_side --newline "ok"
  else
    download_our_large_filesystems
  fi
  popd 1>&2
}

# --- Zone de travail temporaire et log ---
PATH_BACKUP=$PATH
cd "$TMPDIR"
if [[ -z $CONTINUE ]]; then
  tmpfile -u &>/dev/null
fi
export TMPDIR=$TWDIR
export -f tmpfile
REPODIR=$(realpath "$TWDIR")
cd "$REPODIR"
LOGFILE="$REPODIR/log"
echo -e "* The log file is $LOGFILE"
# Redirige stderr vers le fichier de log :
exec 2>>"$LOGFILE"
COMMAND_RESULT="$REPODIR/result"
ALREADY_DONE="$REPODIR/already_done"
touch "$COMMAND_RESULT" "$ALREADY_DONE"

OUR_BASE_URL="https://www.marionnet.org/download/marionnet_from_scratch/$MARIONNET_SERIES/"
OUR_MIRROR="$OUR_BASE_URL/mirror/"

if [[ $DOWNLOAD_ONLY == yes ]]; then
  download_marionnet_kernels_and_filesystems
  echo '---'
  echo "Success."
  exit 0
fi

# --- Téléchargement de marionnet ---
if [[ $MARIONNET_SERIES == "trunk" ]]; then
  launch_and_log "Downloading marionnet" download_marionnet_trunk 22400
else
  launch_and_log "Downloading marionnet" download_latest_marionnet 22400
fi

# --- Compilation et installation de marionnet ---
cd marionnet
sed -i -e "s@^prefix=.*@prefix=$PREFIX@" ./CONFIGME

OPAM_INIT_COMMAND='opam init -y && eval $(opam env) && make configure switch'
launch_and_log "Compiling Ocaml with opam" "$OPAM_INIT_COMMAND" 27800
eval $(opam env)
MARIONNET_MAKE_COMMAND='eval $(opam env) && make rebuild'
launch_and_log "Compiling marionnet" "$MARIONNET_MAKE_COMMAND" 2780

if [[ $USER == root || -w "$PREFIX" ]]; then
  MAKE_INSTALL='make install'
else
  ensure_sudo
  MAKE_INSTALL="PATH=$PATH make install"
fi
launch_and_log --as-root "Installing marionnet" "$MAKE_INSTALL" 3918924

# Création d'un alias vers marionnet si inexistant
if ! command -v marionnet &>/dev/null; then
  pushd "$PREFIX/bin/"
  for i in marionnet.{native,byte}; do
    if [[ -x $i ]]; then
      $SUDO_OR_NOTHING ln -sf $i marionnet
      break
    fi
  done
  popd
fi
cd ..

# --- Installation de vde2 ---
function download_compile_and_install_vde2 {
  download_latest_vde &&
  cd vde2 &&
  ./configure -prefix "$PREFIX" &&
  make &&
  $SUDO_OR_NOTHING make install &&
  cd ..
}
if [[ $IGNORE_VDE == yes ]]; then
  echo -n "* Installing vde2: dependency ignored (--no-vde)"
  echo_at_right_side --newline "ok"
elif command -v vde_switch &>/dev/null; then
  echo -n "* Installing vde2: already installed"
  echo_at_right_side --newline "ok"
else
  launch_and_log "Downloading, compiling and installing vde2" download_compile_and_install_vde2 54276
fi

# --- Installation de dot (graphviz) ---
function download_compile_and_install_graphviz {
  download_latest_graphviz &&
  cd graphviz &&
  ./configure -prefix="$PREFIX" &&
  make &&
  $SUDO_OR_NOTHING make install &&
  cd ..
}
if [[ $IGNORE_DOT == yes ]]; then
  echo -n "* Installing dot (graphviz): dependency ignored (--no-dot)"
  echo_at_right_side --newline "ok"
elif command -v dot &>/dev/null; then
  echo -n "* Installing dot (graphviz): already installed"
  echo_at_right_side --newline "ok"
else
  launch_and_log "Downloading, compiling and installing dot (graphviz)" download_compile_and_install_graphviz 863227
fi

# --- Téléchargement des kernels et filesystems fournis par marionnet ---
download_marionnet_kernels_and_filesystems

# --- Configuration du fichier marionnet.conf ---
if [[ -f $PREFIX/share/marionnet/marionnet.conf ]]; then
  MARIONNET_DOT_CONF="$PREFIX/share/marionnet/marionnet.conf"
elif [[ -f $PREFIX/etc/marionnet/marionnet.conf ]]; then
  MARIONNET_DOT_CONF="$PREFIX/etc/marionnet/marionnet.conf"
elif [[ -f $PREFIX/share/marionnet/share/marionnet.conf ]]; then
  MARIONNET_DOT_CONF="$PREFIX/share/marionnet/share/marionnet.conf"
else
  echo "File 'marionnet.conf' not found. Exiting."
  exit 3
fi

function first_installed_binary_of_list {
  for i in "$@"; do
    if command -v "$i" &>/dev/null; then
      echo "$i"
      return 0
    fi
  done
  echo "$1"
}
MARIONNET_KEYBOARD_LAYOUT=${LANG%%_*}
[ -z "$MARIONNET_KEYBOARD_LAYOUT" ] && MARIONNET_KEYBOARD_LAYOUT="us"
MARIONNET_PDF_READER=$(first_installed_binary_of_list evince okular kpdf xpdf gv)
MARIONNET_POSTSCRIPT_READER=$MARIONNET_PDF_READER
MARIONNET_DVI_READER=$MARIONNET_PDF_READER
MARIONNET_HTML_READER=$(first_installed_binary_of_list firefox epiphany galeon konqueror rekonq chromium opera)
MARIONNET_TEXT_EDITOR=$(first_installed_binary_of_list emacs gedit kate kwrite xemacs)
for i in MARIONNET_{PDF,POSTSCRIPT,DVI,HTML}_READER MARIONNET_TEXT_EDITOR MARIONNET_KEYBOARD_LAYOUT; do
  v=$(eval echo \$$i)
  $SUDO_OR_NOTHING sed -i -e "s/$i=.*/$i=$v/" "$MARIONNET_DOT_CONF"
done

if [[ ! -f /etc/marionnet/marionnet.conf ]]; then
  echo -n "* Installing /etc/marionnet/marionnet.conf ..."
  $SUDO_OR_NOTHING mkdir -p /etc/marionnet/
  $SUDO_OR_NOTHING cp "$MARIONNET_DOT_CONF" /etc/marionnet/
  echo_at_right_side --newline "ok"
fi

# --- Installation d'un script SysV pour le daemon marionnet ---
function generate_the_marionnet_daemon_script {
  local TMPFILE
  TMPFILE=$(tmpfile)
  cat > "$TMPFILE" <<'EOF'
#!/bin/bash
### BEGIN INIT INFO
# Provides: marionnet-daemon
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5 S
# Default-Stop: 2 3 4 5 S
# Short-Description: marionnet daemon
# Description: marionnet daemon
### END INIT INFO
set -e
PATH='"$PREFIX"'/bin:'"$PREFIX"'/sbin:$PATH
DAEMON=$(command -v marionnet-daemon.native || command -v marionnet-daemon.byte)
if [ -z "$DAEMON" ]; then
  echo "Error: marionnet-daemon not found."
  exit 1
fi
case "$1" in
  start)
    echo -n "Starting marionnet daemon..."
    $DAEMON >/dev/null 2>/dev/null &
    echo " Ok"
    ;;
  stop)
    echo -n "Stopping marionnet daemon..."
    pkill -f marionnet-daemon || true
    echo " Ok"
    ;;
  status)
    if pgrep -f marionnet-daemon &>/dev/null; then
      echo "marionnet daemon is running."
    else
      echo "marionnet daemon is stopped."
    fi
    ;;
  *)
    echo "Usage: $0 {start|stop|status}"
    exit 1
    ;;
esac
EOF
  chmod +x "$TMPFILE"
  $SUDO_OR_NOTHING mv -f "$TMPFILE" /etc/init.d/marionnet-daemon
}
function install_the_marionnet_daemon_script {
  generate_the_marionnet_daemon_script
  # Installation automatique dans les runlevels par défaut (SysV)
  $SUDO_OR_NOTHING update-rc.d marionnet-daemon defaults
}
install_the_marionnet_daemon_script

# --- Ajustement de la configuration X (suppression de -nolisten tcp) ---
function remove_nolisten_assignment_from {
  local i=$1
  $SUDO_OR_NOTHING sed -i -e 's/[-]nolisten tcp//g' "$i"
}
function adjust_X_display_manager {
  local FILES
  FILES=$(find /etc/ -type f \( -name "*.conf" -o -name "*rc" \) 2>/dev/null | xargs grep -l "[-]nolisten tcp" || true)
  for i in $FILES; do
    remove_nolisten_assignment_from "$i"
  done
}
adjust_X_display_manager

# --- Ajout automatique d'un alias pour marionnet (Ubuntu) ---
if are_we_in_debian_or_derived; then
  if [[ $USER == root ]]; then
    DEST='/etc/profile'
  else
    DEST="$HOME/.bashrc"
  fi
  append_line_if_needed "alias marionnet='UBUNTU_MENUPROXY=0 marionnet'" "$DEST"
fi

# --- Vérification et ajustement du PATH ---
if ! echo "$PATH_BACKUP" | tr ':' '\n' | grep -q "$PREFIX/bin"; then
  if [[ $USER == root ]]; then
    DEST='/etc/profile'
  else
    DEST="$HOME/.bashrc"
  fi
  append_line_if_needed "export PATH=$PREFIX/bin:$PREFIX/sbin:\$PATH" "$DEST"
fi

# --- Ajustement des locales (déplacement des fichiers marionnet.mo) ---
if [[ "$PREFIX" == "/usr/local" && -d "/usr/share/locale" && -d "/usr/local/share/locale" ]]; then
  PROBABLY_GOOD="/usr/share/locale/"
  PROBABLY_BAD="/usr/local/share/locale"
  COUNT_GOOD=$(find "$PROBABLY_GOOD" -type f -name "*.mo" | wc -l)
  COUNT_BAD=$(find "$PROBABLY_BAD" -type f -name "*.mo" | wc -l)
  if [[ $COUNT_BAD -gt 0 && $((COUNT_GOOD/COUNT_BAD)) -gt 20 ]]; then
    echo -n "* Moving installed locales to $PROBABLY_GOOD"
    pushd "$PROBABLY_BAD" >/dev/null
    find . -name "marionnet.mo" | xargs tar -cf - | $SUDO_OR_NOTHING tar -C "$PROBABLY_GOOD" -xf -
    $SUDO_OR_NOTHING find . -name "marionnet.mo" -exec rm {} \;
    popd >/dev/null
    echo_at_right_side --newline "ok"
  fi
fi

# --- Avertissement pour architecture 64 bits (affichage uniquement) ---
if [[ $(uname -m) == "x86_64" ]]; then
  echo "* Warning: 64-bit architecture detected – make sure that libc6-i386 (ou libc6:i386) is installed." >&2
fi

# --- Nettoyage ---
if [[ $KEEP_DEBRIS == yes ]]; then
  echo -n "* Cleaning: temporary directory $TWDIR kept (-k)"
  echo_at_right_side --newline "ok"
else
  echo "* Cleaning up..."
  rm -rf "$TWDIR"
fi

# --- Notes finales ---
echo '---'
echo "* Notes:"
echo "  - Les filesystems additionnels seront installés dans $PREFIX/share/marionnet/filesystems/"
echo "  - Les kernels additionnels seront installés dans $PREFIX/share/marionnet/kernels/"
echo "  - Pour personnaliser l'installation, modifiez le fichier /etc/marionnet/marionnet.conf"
echo '---'
echo "Success."
exit 0
