//date: 2021-09-13T17:21:11Z
//url: https://api.github.com/gists/07ace4ea7929d00304955d75b2d2da26
//owner: https://api.github.com/users/GeorgiyO

package nekogochan;

import java.util.ArrayList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.Predicate;

class PeakData {
    int[] pos, peaks;

    private PeakData(int[] pos, int[] peaks) {
        this.pos = pos;
        this.peaks = peaks;
    }

    static PeakData of(int[] pos, int[] peaks) {
        return new PeakData(pos, peaks);
    }

    static PeakData empty() {
        return of(new int[0], new int[0]);
    }
}

interface BiIntPredicate {
    boolean check(int a, int b);
}

public class Main {

    static PeakData pickPeaks(int[] v) {

        if (v.length <= 2) return PeakData.empty();

        interface GO_DOWN {
            int call(int from, BiIntPredicate findCondition);
        }
        GO_DOWN goDown = ((from, findCondition) -> {
            for (var i = from; i > 0; i--) {
                if (findCondition.check(v[i], v[i - 1])) return i;
            }
            return -1;
        });

        BiIntPredicate isLess = (a, b) -> a < b;
        BiIntPredicate isMore = (a, b) -> a > b;

        IntUnaryOperator nextPeak = (from) -> {
            var min = goDown.call(from, isLess);
            return min == -1 ? -1 : goDown.call(min, isMore);
        };

        IntSupplier firstPeak = () -> {
            var i = v.length - 1;
            var goingUp = v[i - 1] > v[i];
            return goingUp
                   ? goDown.call(i, isMore)
                   : nextPeak.applyAsInt(i);
        };

        Consumer<IntConsumer> forEachPick = (fn) -> {
            var i = firstPeak.getAsInt();
            if (i != -1) {
                do {
                    fn.accept(i);
                } while ((i = nextPeak.applyAsInt(i)) != -1);
            }
        };

        var pos = new ArrayList<Integer>();
        var peaks = new ArrayList<Integer>();

        IntConsumer push = (i) -> {
            pos.add(i);
            peaks.add(v[i]);
        };

        forEachPick.accept(push);
        return PeakData.of(
            pos.stream().mapToInt((i) -> i).toArray(),
            peaks.stream().mapToInt((i) -> i).toArray()
        );
    }

    public static void main(String[] args) {
        var arr = new int[]{
            -4, 10, -5, 11, 12, 4, 8, 13, -5, 10, 5, 10, 19, 1, 16, 8, 2, 8, 17, 1, -4, 5, 17, 11, 10,
            10, 0,
            1, 5, 10, 5, 6, 0, 5, -2, 19, 16, 11, 11, 18, 3, -3, 9, 3, 3, 4, 17, 12, 19, 15, -5, -3, -1,
            17,
            13, 16, 6, 18, -4, 18, 10, 9, 6, 15, 19, 9, 15, 17, 2, 5, 16, 12, 7, 7, 20, 17, 18, 18, 9,
            17, 13,
            9, 19, 19, 5, 13, 15, 18, 13, 16, 17, 2, 4, 2, -2, 5, 19, 18, 3, 0, 4, 0, 17, 16, 12, 18, 12,
            10,
            16, 2, 8, 10, 16, 8, 8, 2, 0, 2, 1, 20, 0, -2, 3, 11, 5, 6, -3, 3, 5, 5, 10, 14, 13, 6, 9, 4,
            6, 3,
            -5, 1, 10, 8, 16, 8, -5, 5, 15, 3, 13, -2, 2, 20, 1, 13, 10, 11, -2, 13, -4, 9, -1, 11, 4,
            17, -1,
            -5, 3, 10, 3, 3, 16, 20, 19, 13, 9, -5, -3, 6, 3, 17, 9, 13, 16, 15, 5, 8, 5, 10, 2, 6, 0, 8,
            -1,
            10, 5, 3, 10, 15, 18, 20, -1, 15, -5, -3, 7, 10, 0, 11, -5, 8, 8, 11, 2, 5, 5, 14, 18, 17, 6,
            1, 3,
            11, 15, 7, 2, 1, 17, 19, -5, 14, 20, -1, 8, -5, 4, -4, 12, 9, 14, 14, -2, 1, 4, 8, 14, 14, 3,
            13,
            12, 14, 20, 20, 7, 14, 8, 14, -4, 6, 15, -4, -1, 14, 2, 14, 16, 13, 17, 7, 3, 11, 2, 9, 19,
            13, -2,
            12, 6, 6, 5, 0, 2, 6, 1, 14, 1, 17, 9, 2, 2, 3, 3, 7, -1, 12, 2, 20, 5, -1, 9, 15, 17, 16, 3,
            15,
            9, 6, 7, -4, 20, 19, 1, 1, 4, 8, 20, 10, 4, 10, 17, 11, 19, 1, -1, -3, 18, 9, -2, 4, 15, 12,
            1, 11,
            8, 9, 7, -2, -3, -5, 1, -4, 19, 8, 4, 4, -3, 3, 19, 8, 18, 17, 0, 18, -1, 5, -4, -1, -5, 0,
            10, 15,
            17, 16, 5, 6, 5, 17, 11, 9, 18, 18, 12, 18, 7, -5, 2, 9, 5, 2, -2, 4, 1, 3, 2, 5, 15, 3, 11,
            15,
            10, 1, 9, 7, -4, -5, 20, 8, 20, 11, -4, 17, 8, 15, 16, 20, 15, -1, 10, -1, 7, 13, 9, 15, -5,
            18,
            -1, 18, 2, 16, 12, 18, -2, 3, 6, -1, 3, 7, 13, 2, -3, 16, 0, 12, 11, -4, 13, 5, 0, 4, 12, 14,
            -4,
            2, 8, -1, -1, 15, -4, 6, 12, 15, 5, 15, -3, 16, -5, 6, 3, 13, 15, 7, 11, -5, 1, 1, -2, 19,
            13, 3,
            3, 6, -1, 6, -4, 10, -5, 11, 12, 4, 8, 13, -5, 10, 5, 10, 19, 1, 16, 8, 2, 8, 17, 1, -4, 5,
            17, 11,
            10, 10, 0, 1, 5, 10, 5, 6, 0, 5, -2, 19, 16, 11, 11, 18, 3, -3, 9, 3, 3, 4, 17, 12, 19, 15,
            -5, -3,
            -1, 17, 13, 16, 6, 18, -4, 18, 10, 9, 6, 15, 19, 9, 15, 17, 2, 5, 16, 12, 7, 7, 20, 17, 18,
            18, 9,
            17, 13, 9, 19, 19, 5, 13, 15, 18, 13, 16, 17, 2, 4, 2, -2, 5, 19, 18, 3, 0, 4, 0, 17, 16, 12,
            18,
            12, 10, 16, 2, 8, 10, 16, 8, 8, 2, 0, 2, 1, 20, 0, -2, 3, 11, 5, 6, -3, 3, 5, 5, 10, 14, 13,
            6, 9,
            4, 6, 3, -5, 1, 10, 8, 16, 8, -5, 5, 15, 3, 13, -2, 2, 20, 1, 13, 10, 11, -2, 13, -4, 9, -1,
            11, 4,
            17, -1, -5, 3, 10, 3, 3, 16, 20, 19, 13, 9, -5, -3, 6, 3, 17, 9, 13, 16, 15, 5, 8, 5, 10, 2,
            6, 0,
            8, -1, 10, 5, 3, 10, 15, 18, 20, -1, 15, -5, -3, 7, 10, 0, 11, -5, 8, 8, 11, 2, 5, 5, 14, 18,
            17,
            6, 1, 3, 11, 15, 7, 2, 1, 17, 19, -5, 14, 20, -1, 8, -5, 4, -4, 12, 9, 14, 14, -2, 1, 4, 8,
            14, 14,
            3, 13, 12, 14, 20, 20, 7, 14, 8, 14, -4, 6, 15, -4, -1, 14, 2, 14, 16, 13, 17, 7, 3, 11, 2,
            9, 19,
            13, -2, 12, 6, 6, 5, 0, 2, 6, 1, 14, 1, 17, 9, 2, 2, 3, 3, 7, -1, 12, 2, 20, 5, -1, 9, 15,
            17, 16,
            3, 15, 9, 6, 7, -4, 20, 19, 1, 1, 4, 8, 20, 10, 4, 10, 17, 11, 19, 1, -1, -3, 18, 9, -2, 4,
            15, 12,
            1, 11, 8, 9, 7, -2, -3, -5, 1, -4, 19, 8, 4, 4, -3, 3, 19, 8, 18, 17, 0, 18, -1, 5, -4, -1,
            -5, 0,
            10, 15, 17, 16, 5, 6, 5, 17, 11, 9, 18, 18, 12, 18, 7, -5, 2, 9, 5, 2, -2, 4, 1, 3, 2, 5, 15,
            3,
            11, 15, 10, 1, 9, 7, -4, -5, 20, 8, 20, 11, -4, 17, 8, 15, 16, 20, 15, -1, 10, -1, 7, 13, 9,
            15,
            -5, 18, -1, 18, 2, 16, 12, 18, -2, 3, 6, -1, 3, 7, 13, 2, -3, 16, 0, 12, 11, -4, 13, 5, 0, 4,
            12,
            14, -4, 2, 8, -1, -1, 15, -4, 6, 12, 15, 5, 15, -3, 16, -5, 6, 3, 13, 15, 7, 11, -5, 1, 1,
            -2, 19,
            13, 3, 3, 6, -1, 6, -4, 10, -5, 11, 12, 4, 8, 13, -5, 10, 5, 10, 19, 1, 16, 8, 2, 8, 17, 1,
            -4, 5,
            17, 11, 10, 10, 0, 1, 5, 10, 5, 6, 0, 5, -2, 19, 16, 11, 11, 18, 3, -3, 9, 3, 3, 4, 17, 12,
            19, 15,
            -5, -3, -1, 17, 13, 16, 6, 18, -4, 18, 10, 9, 6, 15, 19, 9, 15, 17, 2, 5, 16, 12, 7, 7, 20,
            17, 18,
            18, 9, 17, 13, 9, 19, 19, 5, 13, 15, 18, 13, 16, 17, 2, 4, 2, -2, 5, 19, 18, 3, 0, 4, 0, 17,
            16,
            12, 18, 12, 10, 16, 2, 8, 10, 16, 8, 8, 2, 0, 2, 1, 20, 0, -2, 3, 11, 5, 6, -3, 3, 5, 5, 10,
            14,
            13, 6, 9, 4, 6, 3, -5, 1, 10, 8, 16, 8, -5, 5, 15, 3, 13, -2, 2, 20, 1, 13, 10, 11, -2, 13,
            -4, 9,
            -1, 11, 4, 17, -1, -5, 3, 10, 3, 3, 16, 20, 19, 13, 9, -5, -3, 6, 3, 17, 9, 13, 16, 15, 5, 8,
            5,
            10, 2, 6, 0, 8, -1, 10, 5, 3, 10, 15, 18, 20, -1, 15, -5, -3, 7, 10, 0, 11, -5, 8, 8, 11, 2,
            5, 5,
            14, 18, 17, 6, 1, 3, 11, 15, 7, 2, 1, 17, 19, -5, 14, 20, -1, 8, -5, 4, -4, 12, 9, 14, 14,
            -2, 1,
            4, 8, 14, 14, 3, 13, 12, 14, 20, 20, 7, 14, 8, 14, -4, 6, 15, -4, -1, 14, 2, 14, 16, 13, 17,
            7, 3,
            11, 2, 9, 19, 13, -2, 12, 6, 6, 5, 0, 2, 6, 1, 14, 1, 17, 9, 2, 2, 3, 3, 7, -1, 12, 2, 20, 5,
            -1,
            9, 15, 17, 16, 3, 15, 9, 6, 7, -4, 20, 19, 1, 1, 4, 8, 20, 10, 4, 10, 17, 11, 19, 1, -1, -3,
            18, 9,
            -2, 4, 15, 12, 1, 11, 8, 9, 7, -2, -3, -5, 1, -4, 19, 8, 4, 4, -3, 3, 19, 8, 18, 17, 0, 18,
            -1, 5,
            -4, -1, -5, 0, 10, 15, 17, 16, 5, 6, 5, 17, 11, 9, 18, 18, 12, 18, 7, -5, 2, 9, 5, 2, -2, 4,
            1, 3,
            2, 5, 15, 3, 11, 15, 10, 1, 9, 7, -4, -5, 20, 8, 20, 11, -4, 17, 8, 15, 16, 20, 15, -1, 10,
            -1, 7,
            13, 9, 15, -5, 18, -1, 18, 2, 16, 12, 18, -2, 3, 6, -1, 3, 7, 13, 2, -3, 16, 0, 12, 11, -4,
            13, 5,
            0, 4, 12, 14, -4, 2, 8, -1, -1, 15, -4, 6, 12, 15, 5, 15, -3, 16, -5, 6, 3, 13, 15, 7, 11,
            -5, 1,
            1, -2, 19, 13, 3, 3, 6, -1, 6
        };

        System.out.println(arr.length);

        var time = System.currentTimeMillis();
        for (int i = 0; i < 50000; i++) {
            pickPeaks(arr);
        }
        time = System.currentTimeMillis() - time;
        System.out.println("time = " + time);
    }
}
