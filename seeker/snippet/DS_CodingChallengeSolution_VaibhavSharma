#date: 2024-12-03T16:58:55Z
#url: https://api.github.com/gists/96ceaaa003ee2fc172c36da6239f5176
#owner: https://api.github.com/users/vash02

#!/usr/bin/env python
# coding: utf-8

# ## Problem 1

# In[22]:


#Find pair with sum 2020 and return the product

def find_2020_pair(filename, target_sum = 2020):
    with open(filename, "r") as file:
        numbers = [int(line.strip()) for line in file]
    
    #Set to store the number already visited while iterating and ensuring O(1) retrieval
    visited = set()
    for num1 in numbers:
        num2 = target_sum - num1
        # If num2 is in visited, we find our pair
        if num2 in visited:
            print(f"num1={num1} and num2={num2}")
            return num1 * num2
        # add num1 to visited set on each iteration
        visited.add(num1)
    
    return 0


# In[23]:


#I saved the file from github as ds_coding_challenge_dataset.txt, th file is uploaded to github repository too

#Finding pair summing to 2020 and return the product of the pair
find_2020_pair('dataset') #Name of the dataset file


# ## Problem 2

# In[24]:


#finding group of 3 integers summing up to 2020

def sum_2020_triplet(filename, target_sum = 2020):
    with open(filename, "r") as file:
        numbers = [int(line.strip()) for line in file]
        
    #Again we use set to ensure search operation is O(1)
    for i in range(len(numbers)):
        # we initialise visited set here to ensure
        visited = set()
        curr_sum = target_sum - numbers[i]
        for j in range(i+1, len(numbers)):
            num3 = curr_sum - numbers[j]
            if num3 in visited:
                print(f"num1={numbers[i]}, num2={numbers[j]} and num3={num3}")
                return numbers[i] * numbers[j] * num3
            visited.add(numbers[j])
    
    return 0


# In[26]:


#Same file for getting triplets summing to 2020
sum_2020_triplet('dataset') #Name of the dataset file


# In[ ]:




