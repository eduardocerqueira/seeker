#date: 2025-08-13T16:50:34Z
#url: https://api.github.com/gists/8592e9793f9e015b5f23f7a0d19894f5
#owner: https://api.github.com/users/kostyagrig

#!/bin/bash
# ==============================================
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ VLESS + Reality + Cloudflare Proxy
# –í–µ—Ä—Å–∏—è: 3.0 | –ó–∞—â–∏—Ç–∞: Fail2Ban + Port Knocking
# ==============================================

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
DOMAIN="u1host.com"           # –í–∞—à –¥–æ–º–µ–Ω (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ Cloudflare)
CF_API_KEY="-7w40npW4Ibla0eSRfSEkqhNfhBmUzHE9iqittpw"  # API-–∫–ª—é—á Cloudflare
CF_EMAIL="kostyagrig54@gmail.com"         # Email –∞–∫–∫–∞—É–Ω—Ç–∞ Cloudflare
SSH_PORT="222"                    # –ü–æ—Ä—Ç SSH
TG_BOT_TOKEN="8395993929: "**********"
ADMIN_CHAT_ID="398196069"     # ID –∞–¥–º–∏–Ω–∞ –≤ Telegram
BACKUP_DIR="/root/vpn_backups"    # –ü–∞–ø–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–æ–≤

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ root ---
[ "$(id -u)" -ne 0 ] && { echo "–¢—Ä–µ–±—É–µ—Ç—Å—è root!"; exit 1; }

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
apt update && apt upgrade -y
apt install -y curl wget git ufw fail2ban python3 python3-pip knockd jq

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏ ---
ufw allow $SSH_PORT/tcp
ufw allow 443/tcp
ufw --force enable

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH ---
sed -i "s/#Port 22/Port $SSH_PORT/g" /etc/ssh/sshd_config
systemctl restart sshd

# --- Port Knocking –¥–ª—è SSH ---
cat > /etc/knockd.conf <<EOF
[options]
    UseSyslog

[openSSH]
    sequence = 7000,8000,9000
    seq_timeout = 5
    command = /usr/sbin/iptables -A INPUT -s %IP% -p tcp --dport $SSH_PORT -j ACCEPT
    tcpflags = syn
EOF
systemctl enable --now knockd

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudflare Proxy ---
curl -s -X PATCH "https://api.cloudflare.com/client/v4/zones/$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$DOMAIN" -H "X-Auth-Email: $CF_EMAIL" -H "X-Auth-Key: $CF_API_KEY" | jq -r '.result[0].id')/settings/proxy" \
-H "X-Auth-Email: $CF_EMAIL" -H "X-Auth-Key: $CF_API_KEY" \
--data '{"value":"on"}' | jq

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray-core —Å Reality ---
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Reality-–∫–ª—é—á–µ–π
PRIVATE_KEY=$(xray x25519 | awk '/Private key:/ {print $3}')
PUBLIC_KEY=$(xray x25519 | awk '/Public key:/ {print $3}')
SHORT_ID=$(openssl rand -hex 8)

# –ö–æ–Ω—Ñ–∏–≥ Xray
cat > /usr/local/etc/xray/config.json <<EOF
{
  "inbounds": [
    {
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "$(xray uuid)",
            "flow": "xtls-rprx-vision"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "$DOMAIN:443",
          "xver": 0,
          "serverNames": ["$DOMAIN"],
          "privateKey": "$PRIVATE_KEY",
          "shortIds": ["$SHORT_ID"]
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
EOF

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ç–∫–∞–ø–æ–≤ ---
mkdir -p $BACKUP_DIR
cat > /usr/local/bin/vpn_backup <<EOF
#!/bin/bash
BACKUP_FILE="$BACKUP_DIR/vpn_backup_\$(date +%Y-%m-%d).tar.gz"
tar -czf \$BACKUP_FILE /usr/local/etc/xray /etc/ssh/sshd_config /root
find $BACKUP_DIR -type f -mtime +30 -delete
EOF
chmod +x /usr/local/bin/vpn_backup
(crontab -l 2>/dev/null; echo "0 3 1 * * /usr/local/bin/vpn_backup") | crontab -

# --- –°–æ–∑–¥–∞–Ω–∏–µ systemd-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –±–æ—Ç–∞ ---
cat > /etc/systemd/system/xray-bot.service <<EOF
[Unit]
Description=Xray Telegram Bot
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/bin/python3 /etc/xray-bot.py
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# --- Telegram –±–æ—Ç ---
pip3 install python-telegram-bot qrcode[pil]
cat > /etc/xray-bot.py <<EOF
import os
import qrcode
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler

TOKEN = "**********"
ADMIN_ID = $ADMIN_CHAT_ID
DOMAIN = "$DOMAIN"
PUB_KEY = "$PUBLIC_KEY"
SHORT_ID = "$SHORT_ID"

def generate_config(user_id):
    uuid = os.popen("xray uuid").read().strip()
    vless_link = f"vless://{uuid}@{DOMAIN}:443?type=tcp&security=reality&flow=xtls-rprx-vision&pbk={PUB_KEY}&sid={SHORT_ID}&sni={DOMAIN}#VPN-{user_id}"
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(vless_link)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    img.save(f"/tmp/vless-{user_id}.png")
    return vless_link, f"/tmp/vless-{user_id}.png"

def start(update: Update, context):
    update.message.reply_text(
        "üîí VPN Bot: –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="request")]
        ])
    )

def button_handler(update: Update, context):
    query = update.callback_query
    if query.data == "request":
        context.bot.send_message(
            ADMIN_ID,
            f"üÜï –ó–∞–ø—Ä–æ—Å –æ—Ç: {query.from_user.full_name}\nID: {query.from_user.id}\n\n–û–¥–æ–±—Ä–∏—Ç—å: /approve_{query.from_user.id}"
        )
        query.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

def approve(update: Update, context):
    if update.effective_user.id != ADMIN_ID:
        return
    user_id = int(update.message.text.split("_")[1])
    vless_link, qr_path = generate_config(user_id)
    context.bot.send_photo(
        user_id,
        photo=open(qr_path, "rb"),
        caption=f"üîë –í–∞—à Reality-–∫–æ–Ω—Ñ–∏–≥:\n\n<code>{vless_link}</code>\n\n‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: <code>{PUB_KEY}</code>\n‚Ä¢ Short ID: <code>{SHORT_ID}</code>",
        parse_mode="HTML"
    )
    os.remove(qr_path)

updater = "**********"
updater.dispatcher.add_handler(CommandHandler("start", start))
updater.dispatcher.add_handler(CallbackQueryHandler(button_handler))
updater.dispatcher.add_handler(CommandHandler("approve", approve))
updater.start_polling()
EOF

# --- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ ---
systemctl daemon-reload
systemctl enable xray-bot.service
systemctl start xray-bot.service

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ ---
systemctl enable --now xray
systemctl enable --now xray-bot

# --- Fail2Ban ---
cat > /etc/fail2ban/jail.local <<EOF
[sshd]
enabled = true
port = $SSH_PORT
maxretry = 3
bantime = 1h
EOF
systemctl restart fail2ban

# --- –ò—Ç–æ–≥ ---
echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "------------------------------------------"
echo "Reality-–∫–ª—é—á–∏:"
echo "‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–π: $PUBLIC_KEY"
echo "‚Ä¢ Short ID: $SHORT_ID"
echo "------------------------------------------"
echo "SSH: –ø–æ—Ä—Ç $SSH_PORT (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ knockd)"
echo "–ë—ç–∫–∞–ø—ã: /usr/local/bin/vpn_backup"
echo "–ë–æ—Ç: /start –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞"
echo "------------------------------------------"
echo "------------------------------------------"